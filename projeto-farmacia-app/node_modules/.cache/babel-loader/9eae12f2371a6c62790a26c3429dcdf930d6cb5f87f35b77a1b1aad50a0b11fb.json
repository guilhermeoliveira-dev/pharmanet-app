{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CompositionEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\nvar keyOf = require(\"./keyOf\");\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\nvar useCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. In Korean, for example,\n// the compositionend event contains only one character regardless of\n// how many characters have been composed since compositionstart.\n// We therefore use the fallback data while still using the native\n// events as triggers.\nvar useFallbackData = !useCompositionEvent || 'documentMode' in document && document.documentMode > 8 && document.documentMode <= 11;\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar currentComposition = null;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionEnd: null\n      }),\n      captured: keyOf({\n        onCompositionEndCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionStart: null\n      }),\n      captured: keyOf({\n        onCompositionStartCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionUpdate: null\n      }),\n      captured: keyOf({\n        onCompositionUpdateCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Helper class stores information about selection and document state\n * so we can figure out what changed at a later date.\n *\n * @param {DOMEventTarget} root\n */\nfunction FallbackCompositionState(root) {\n  this.root = root;\n  this.startSelection = ReactInputSelection.getSelection(root);\n  this.startValue = this.getText();\n}\n\n/**\n * Get current text of input.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getText = function () {\n  return this.root.value || this.root[getTextContentAccessor()];\n};\n\n/**\n * Text that has changed since the start of composition.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getData = function () {\n  var endValue = this.getText();\n  var prefixLength = this.startSelection.start;\n  var suffixLength = this.startValue.length - this.startSelection.end;\n  return endValue.substr(prefixLength, endValue.length - suffixLength - prefixLength);\n};\n\n/**\n * This plugin creates `onCompositionStart`, `onCompositionUpdate` and\n * `onCompositionEnd` events on inputs, textareas and contentEditable\n * nodes.\n */\nvar CompositionEventPlugin = {\n  eventTypes: eventTypes,\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var eventType;\n    var data;\n    if (useCompositionEvent) {\n      eventType = getCompositionEventType(topLevelType);\n    } else if (!currentComposition) {\n      if (isFallbackStart(topLevelType, nativeEvent)) {\n        eventType = eventTypes.compositionStart;\n      }\n    } else if (isFallbackEnd(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionEnd;\n    }\n    if (useFallbackData) {\n      // The current composition is stored statically and must not be\n      // overwritten while composition continues.\n      if (!currentComposition && eventType === eventTypes.compositionStart) {\n        currentComposition = new FallbackCompositionState(topLevelTarget);\n      } else if (eventType === eventTypes.compositionEnd) {\n        if (currentComposition) {\n          data = currentComposition.getData();\n          currentComposition = null;\n        }\n      }\n    }\n    if (eventType) {\n      var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent);\n      if (data) {\n        // Inject data generated from fallback path into the synthetic event.\n        // This matches the property of native CompositionEventInterface.\n        event.data = data;\n      }\n      EventPropagators.accumulateTwoPhaseDispatches(event);\n      return event;\n    }\n  }\n};\nmodule.exports = CompositionEventPlugin;","map":{"version":3,"names":["EventConstants","require","EventPropagators","ExecutionEnvironment","ReactInputSelection","SyntheticCompositionEvent","getTextContentAccessor","keyOf","END_KEYCODES","START_KEYCODE","useCompositionEvent","canUseDOM","window","useFallbackData","document","documentMode","topLevelTypes","currentComposition","eventTypes","compositionEnd","phasedRegistrationNames","bubbled","onCompositionEnd","captured","onCompositionEndCapture","dependencies","topBlur","topCompositionEnd","topKeyDown","topKeyPress","topKeyUp","topMouseDown","compositionStart","onCompositionStart","onCompositionStartCapture","topCompositionStart","compositionUpdate","onCompositionUpdate","onCompositionUpdateCapture","topCompositionUpdate","getCompositionEventType","topLevelType","isFallbackStart","nativeEvent","keyCode","isFallbackEnd","indexOf","FallbackCompositionState","root","startSelection","getSelection","startValue","getText","prototype","value","getData","endValue","prefixLength","start","suffixLength","length","end","substr","CompositionEventPlugin","extractEvents","topLevelTarget","topLevelTargetID","eventType","data","event","getPooled","accumulateTwoPhaseDispatches","module","exports"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/node_modules/react-checkbox/node_modules/react/lib/CompositionEventPlugin.js"],"sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CompositionEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");\n\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\nvar keyOf = require(\"./keyOf\");\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar useCompositionEvent = (\n  ExecutionEnvironment.canUseDOM &&\n  'CompositionEvent' in window\n);\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. In Korean, for example,\n// the compositionend event contains only one character regardless of\n// how many characters have been composed since compositionstart.\n// We therefore use the fallback data while still using the native\n// events as triggers.\nvar useFallbackData = (\n  !useCompositionEvent ||\n  (\n    'documentMode' in document &&\n    document.documentMode > 8 &&\n    document.documentMode <= 11\n  )\n);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar currentComposition = null;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionEnd: null}),\n      captured: keyOf({onCompositionEndCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionStart: null}),\n      captured: keyOf({onCompositionStartCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionStart,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionUpdate: null}),\n      captured: keyOf({onCompositionUpdateCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionUpdate,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  }\n};\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackStart(topLevelType, nativeEvent) {\n  return (\n    topLevelType === topLevelTypes.topKeyDown &&\n    nativeEvent.keyCode === START_KEYCODE\n  );\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return (nativeEvent.keyCode !== START_KEYCODE);\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Helper class stores information about selection and document state\n * so we can figure out what changed at a later date.\n *\n * @param {DOMEventTarget} root\n */\nfunction FallbackCompositionState(root) {\n  this.root = root;\n  this.startSelection = ReactInputSelection.getSelection(root);\n  this.startValue = this.getText();\n}\n\n/**\n * Get current text of input.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getText = function() {\n  return this.root.value || this.root[getTextContentAccessor()];\n};\n\n/**\n * Text that has changed since the start of composition.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getData = function() {\n  var endValue = this.getText();\n  var prefixLength = this.startSelection.start;\n  var suffixLength = this.startValue.length - this.startSelection.end;\n\n  return endValue.substr(\n    prefixLength,\n    endValue.length - suffixLength - prefixLength\n  );\n};\n\n/**\n * This plugin creates `onCompositionStart`, `onCompositionUpdate` and\n * `onCompositionEnd` events on inputs, textareas and contentEditable\n * nodes.\n */\nvar CompositionEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var eventType;\n    var data;\n\n    if (useCompositionEvent) {\n      eventType = getCompositionEventType(topLevelType);\n    } else if (!currentComposition) {\n      if (isFallbackStart(topLevelType, nativeEvent)) {\n        eventType = eventTypes.compositionStart;\n      }\n    } else if (isFallbackEnd(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionEnd;\n    }\n\n    if (useFallbackData) {\n      // The current composition is stored statically and must not be\n      // overwritten while composition continues.\n      if (!currentComposition && eventType === eventTypes.compositionStart) {\n        currentComposition = new FallbackCompositionState(topLevelTarget);\n      } else if (eventType === eventTypes.compositionEnd) {\n        if (currentComposition) {\n          data = currentComposition.getData();\n          currentComposition = null;\n        }\n      }\n    }\n\n    if (eventType) {\n      var event = SyntheticCompositionEvent.getPooled(\n        eventType,\n        topLevelTargetID,\n        nativeEvent\n      );\n      if (data) {\n        // Inject data generated from fallback path into the synthetic event.\n        // This matches the property of native CompositionEventInterface.\n        event.data = data;\n      }\n      EventPropagators.accumulateTwoPhaseDispatches(event);\n      return event;\n    }\n  }\n};\n\nmodule.exports = CompositionEventPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}