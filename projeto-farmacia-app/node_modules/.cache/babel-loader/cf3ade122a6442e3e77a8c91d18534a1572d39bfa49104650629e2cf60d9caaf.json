{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\nvar ReactLegacyElement = require(\"./ReactLegacyElement\");\nvar ReactOwner = require(\"./ReactOwner\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar assign = require(\"./Object.assign\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar keyOf = require(\"./keyOf\");\nvar monitorCodeUse = require(\"./monitorCodeUse\");\nvar mapObject = require(\"./mapObject\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\nvar warning = require(\"./warning\");\nvar MIXINS_KEY = keyOf({\n  mixins: null\n});\n\n/**\n * Policies that describe methods in `ReactCompositeComponentInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base ReactCompositeComponent class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\nvar injectedMixins = [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactCompositeComponent`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactCompositeComponentInterface\n * @internal\n */\nvar ReactCompositeComponentInterface = {\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function (Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function (Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function (Constructor, childContextTypes) {\n    validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);\n    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);\n  },\n  contextTypes: function (Constructor, contextTypes) {\n    validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);\n    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function (Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function (Constructor, propTypes) {\n    validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);\n    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);\n  },\n  statics: function (Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  }\n};\nfunction getDeclarationErrorAddendum(component) {\n  var owner = component._owner || null;\n  if (owner && owner.constructor && owner.constructor.displayName) {\n    return ' Check the render method of `' + owner.constructor.displayName + '`.';\n  }\n  return '';\n}\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      \"production\" !== process.env.NODE_ENV ? invariant(typeof typeDef[propName] == 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactCompositeComponent', ReactPropTypeLocationNames[location], propName) : invariant(typeof typeDef[propName] == 'function');\n    }\n  }\n}\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ? ReactCompositeComponentInterface[name] : null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(specPolicy === SpecPolicy.OVERRIDE_BASE, 'ReactCompositeComponentInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE);\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED, 'ReactCompositeComponentInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED);\n  }\n}\nfunction validateLifeCycleOnReplaceState(instance) {\n  var compositeLifeCycleState = instance._compositeLifeCycleState;\n  \"production\" !== process.env.NODE_ENV ? invariant(instance.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING, 'replaceState(...): Can only update a mounted or mounting component.') : invariant(instance.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING);\n  \"production\" !== process.env.NODE_ENV ? invariant(ReactCurrentOwner.current == null, 'replaceState(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.') : invariant(ReactCurrentOwner.current == null);\n  \"production\" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING, 'replaceState(...): Cannot update while unmounting component. This ' + 'usually means you called setState() on an unmounted component.') : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING);\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building `ReactCompositeComponent` classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n  \"production\" !== process.env.NODE_ENV ? invariant(!ReactLegacyElement.isValidFactory(spec), 'ReactCompositeComponent: You\\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(!ReactLegacyElement.isValidFactory(spec));\n  \"production\" !== process.env.NODE_ENV ? invariant(!ReactElement.isValidElement(spec), 'ReactCompositeComponent: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(!ReactElement.isValidElement(spec));\n  var proto = Constructor.prototype;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above\n      continue;\n    }\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactCompositeComponent methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isCompositeComponentMethod = ReactCompositeComponentInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var markedDontBind = property && property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind = isFunction && !isCompositeComponentMethod && !isAlreadyDefined && !markedDontBind;\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactCompositeComponentInterface[name];\n\n          // These cases should already be caught by validateMethodOverride\n          \"production\" !== process.env.NODE_ENV ? invariant(isCompositeComponentMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY), 'ReactCompositeComponent: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(isCompositeComponentMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY));\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (\"production\" !== process.env.NODE_ENV) {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n    var isReserved = name in RESERVED_SPEC_KEYS;\n    \"production\" !== process.env.NODE_ENV ? invariant(!isReserved, 'ReactCompositeComponent: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(!isReserved);\n    var isInherited = name in Constructor;\n    \"production\" !== process.env.NODE_ENV ? invariant(!isInherited, 'ReactCompositeComponent: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(!isInherited);\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeObjectsWithNoDuplicateKeys(one, two) {\n  \"production\" !== process.env.NODE_ENV ? invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects') : invariant(one && two && typeof one === 'object' && typeof two === 'object');\n  mapObject(two, function (value, key) {\n    \"production\" !== process.env.NODE_ENV ? invariant(one[key] === undefined, 'mergeObjectsWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(one[key] === undefined);\n    one[key] = value;\n  });\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    return mergeObjectsWithNoDuplicateKeys(a, b);\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * `ReactCompositeComponent` maintains an auxiliary life cycle state in\n * `this._compositeLifeCycleState` (which can be null).\n *\n * This is different from the life cycle state maintained by `ReactComponent` in\n * `this._lifeCycleState`. The following diagram shows how the states overlap in\n * time. There are times when the CompositeLifeCycle is null - at those times it\n * is only meaningful to look at ComponentLifeCycle alone.\n *\n * Top Row: ReactComponent.ComponentLifeCycle\n * Low Row: ReactComponent.CompositeLifeCycle\n *\n * +-------+---------------------------------+--------+\n * |  UN   |             MOUNTED             |   UN   |\n * |MOUNTED|                                 | MOUNTED|\n * +-------+---------------------------------+--------+\n * |       ^--------+   +-------+   +--------^        |\n * |       |        |   |       |   |        |        |\n * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |\n * |       |        |   |PROPS  |   |MOUNTING|        |\n * |       |        |   |       |   |        |        |\n * |       |        |   |       |   |        |        |\n * |       +--------+   +-------+   +--------+        |\n * |       |                                 |        |\n * +-------+---------------------------------+--------+\n */\nvar CompositeLifeCycle = keyMirror({\n  /**\n   * Components in the process of being mounted respond to state changes\n   * differently.\n   */\n  MOUNTING: null,\n  /**\n   * Components in the process of being unmounted are guarded against state\n   * changes.\n   */\n  UNMOUNTING: null,\n  /**\n   * Components that are mounted and receiving new props respond to state\n   * changes differently.\n   */\n  RECEIVING_PROPS: null\n});\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function (element) {\n    // Children can be either an array or more than one argument\n    ReactComponent.Mixin.construct.apply(this, arguments);\n    ReactOwner.Mixin.construct.apply(this, arguments);\n    this.state = null;\n    this._pendingState = null;\n\n    // This is the public post-processed context. The real context and pending\n    // context lives on the element.\n    this.context = null;\n    this._compositeLifeCycleState = null;\n  },\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function () {\n    return ReactComponent.Mixin.isMounted.call(this) && this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;\n  },\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: ReactPerf.measure('ReactCompositeComponent', 'mountComponent', function (rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(this, rootID, transaction, mountDepth);\n    this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;\n    if (this.__reactAutoBindMap) {\n      this._bindAutoBindMethods();\n    }\n    this.context = this._processContext(this._currentElement._context);\n    this.props = this._processProps(this.props);\n    this.state = this.getInitialState ? this.getInitialState() : null;\n    \"production\" !== process.env.NODE_ENV ? invariant(typeof this.state === 'object' && !Array.isArray(this.state), '%s.getInitialState(): must return an object or null', this.constructor.displayName || 'ReactCompositeComponent') : invariant(typeof this.state === 'object' && !Array.isArray(this.state));\n    this._pendingState = null;\n    this._pendingForceUpdate = false;\n    if (this.componentWillMount) {\n      this.componentWillMount();\n      // When mounting, calls to `setState` by `componentWillMount` will set\n      // `this._pendingState` without triggering a re-render.\n      if (this._pendingState) {\n        this.state = this._pendingState;\n        this._pendingState = null;\n      }\n    }\n    this._renderedComponent = instantiateReactComponent(this._renderValidatedComponent(), this._currentElement.type // The wrapping type\n    );\n\n    // Done with mounting, `setState` will now trigger UI changes.\n    this._compositeLifeCycleState = null;\n    var markup = this._renderedComponent.mountComponent(rootID, transaction, mountDepth + 1);\n    if (this.componentDidMount) {\n      transaction.getReactMountReady().enqueue(this.componentDidMount, this);\n    }\n    return markup;\n  }),\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function () {\n    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n    this._compositeLifeCycleState = null;\n    this._renderedComponent.unmountComponent();\n    this._renderedComponent = null;\n    ReactComponent.Mixin.unmountComponent.call(this);\n\n    // Some existing components rely on this.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: this.props = null;\n    // TODO: this.state = null;\n  },\n  /**\n   * Sets a subset of the state. Always use this or `replaceState` to mutate\n   * state. You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * There is no guarantee that calls to `setState` will run synchronously,\n   * as they may eventually be batched together.  You can provide an optional\n   * callback that will be executed when the call to setState is actually\n   * completed.\n   *\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  setState: function (partialState, callback) {\n    \"production\" !== process.env.NODE_ENV ? invariant(typeof partialState === 'object' || partialState == null, 'setState(...): takes an object of state variables to update.') : invariant(typeof partialState === 'object' || partialState == null);\n    if (\"production\" !== process.env.NODE_ENV) {\n      \"production\" !== process.env.NODE_ENV ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : null;\n    }\n    // Merge with `_pendingState` if it exists, otherwise with existing state.\n    this.replaceState(assign({}, this._pendingState || this.state, partialState), callback);\n  },\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  replaceState: function (completeState, callback) {\n    validateLifeCycleOnReplaceState(this);\n    this._pendingState = completeState;\n    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {\n      // If we're in a componentWillMount handler, don't enqueue a rerender\n      // because ReactUpdates assumes we're in a browser context (which is wrong\n      // for server rendering) and we're about to do a render anyway.\n      // TODO: The callback here is ignored when setState is called from\n      // componentWillMount. Either fix it or disallow doing so completely in\n      // favor of getInitialState.\n      ReactUpdates.enqueueUpdate(this, callback);\n    }\n  },\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function (context) {\n    var maskedContext = null;\n    var contextTypes = this.constructor.contextTypes;\n    if (contextTypes) {\n      maskedContext = {};\n      for (var contextName in contextTypes) {\n        maskedContext[contextName] = context[contextName];\n      }\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(contextTypes, maskedContext, ReactPropTypeLocations.context);\n      }\n    }\n    return maskedContext;\n  },\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function (currentContext) {\n    var childContext = this.getChildContext && this.getChildContext();\n    var displayName = this.constructor.displayName || 'ReactCompositeComponent';\n    if (childContext) {\n      \"production\" !== process.env.NODE_ENV ? invariant(typeof this.constructor.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', displayName) : invariant(typeof this.constructor.childContextTypes === 'object');\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(this.constructor.childContextTypes, childContext, ReactPropTypeLocations.childContext);\n      }\n      for (var name in childContext) {\n        \"production\" !== process.env.NODE_ENV ? invariant(name in this.constructor.childContextTypes, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', displayName, name) : invariant(name in this.constructor.childContextTypes);\n      }\n      return assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function (newProps) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var propTypes = this.constructor.propTypes;\n      if (propTypes) {\n        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);\n      }\n    }\n    return newProps;\n  },\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function (propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the element\n    // validation.\n    var componentName = this.constructor.displayName;\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error = propTypes[propName](props, propName, componentName, location);\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // renderComponent calls, so I'm abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum = getDeclarationErrorAddendum(this);\n          \"production\" !== process.env.NODE_ENV ? warning(false, error.message + addendum) : null;\n        }\n      }\n    }\n  },\n  /**\n   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (transaction) {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    // Do not trigger a state transition if we are in the middle of mounting or\n    // receiving props because both of those will already be doing this.\n    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING || compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {\n      return;\n    }\n    if (this._pendingElement == null && this._pendingState == null && !this._pendingForceUpdate) {\n      return;\n    }\n    var nextContext = this.context;\n    var nextProps = this.props;\n    var nextElement = this._currentElement;\n    if (this._pendingElement != null) {\n      nextElement = this._pendingElement;\n      nextContext = this._processContext(nextElement._context);\n      nextProps = this._processProps(nextElement.props);\n      this._pendingElement = null;\n      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;\n      if (this.componentWillReceiveProps) {\n        this.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n    this._compositeLifeCycleState = null;\n    var nextState = this._pendingState || this.state;\n    this._pendingState = null;\n    var shouldUpdate = this._pendingForceUpdate || !this.shouldComponentUpdate || this.shouldComponentUpdate(nextProps, nextState, nextContext);\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (typeof shouldUpdate === \"undefined\") {\n        console.warn((this.constructor.displayName || 'ReactCompositeComponent') + '.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.');\n      }\n    }\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction);\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state.\n      this._currentElement = nextElement;\n      this.props = nextProps;\n      this.state = nextState;\n      this.context = nextContext;\n\n      // Owner cannot change because shouldUpdateReactComponent doesn't allow\n      // it. TODO: Remove this._owner completely.\n      this._owner = nextElement._owner;\n    }\n  },\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @private\n   */\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction) {\n    var prevElement = this._currentElement;\n    var prevProps = this.props;\n    var prevState = this.state;\n    var prevContext = this.context;\n    if (this.componentWillUpdate) {\n      this.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n    this._currentElement = nextElement;\n    this.props = nextProps;\n    this.state = nextState;\n    this.context = nextContext;\n\n    // Owner cannot change because shouldUpdateReactComponent doesn't allow\n    // it. TODO: Remove this._owner completely.\n    this._owner = nextElement._owner;\n    this.updateComponent(transaction, prevElement);\n    if (this.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(this.componentDidUpdate.bind(this, prevProps, prevState, prevContext), this);\n    }\n  },\n  receiveComponent: function (nextElement, transaction) {\n    if (nextElement === this._currentElement && nextElement._owner != null) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for a element created outside a composite to be\n      // deeply mutated and reused.\n      return;\n    }\n    ReactComponent.Mixin.receiveComponent.call(this, nextElement, transaction);\n  },\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: ReactPerf.measure('ReactCompositeComponent', 'updateComponent', function (transaction, prevParentElement) {\n    ReactComponent.Mixin.updateComponent.call(this, transaction, prevParentElement);\n    var prevComponentInstance = this._renderedComponent;\n    var prevElement = prevComponentInstance._currentElement;\n    var nextElement = this._renderValidatedComponent();\n    if (shouldUpdateReactComponent(prevElement, nextElement)) {\n      prevComponentInstance.receiveComponent(nextElement, transaction);\n    } else {\n      // These two IDs are actually the same! But nothing should rely on that.\n      var thisID = this._rootNodeID;\n      var prevComponentID = prevComponentInstance._rootNodeID;\n      prevComponentInstance.unmountComponent();\n      this._renderedComponent = instantiateReactComponent(nextElement, this._currentElement.type);\n      var nextMarkup = this._renderedComponent.mountComponent(thisID, transaction, this._mountDepth + 1);\n      ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n    }\n  }),\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldUpdateComponent`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {?function} callback Called after update is complete.\n   * @final\n   * @protected\n   */\n  forceUpdate: function (callback) {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    \"production\" !== process.env.NODE_ENV ? invariant(this.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING, 'forceUpdate(...): Can only force an update on mounted or mounting ' + 'components.') : invariant(this.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING);\n    \"production\" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING && ReactCurrentOwner.current == null, 'forceUpdate(...): Cannot force an update while unmounting component ' + 'or within a `render` function.') : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING && ReactCurrentOwner.current == null);\n    this._pendingForceUpdate = true;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n  /**\n   * @private\n   */\n  _renderValidatedComponent: ReactPerf.measure('ReactCompositeComponent', '_renderValidatedComponent', function () {\n    var renderedComponent;\n    var previousContext = ReactContext.current;\n    ReactContext.current = this._processChildContext(this._currentElement._context);\n    ReactCurrentOwner.current = this;\n    try {\n      renderedComponent = this.render();\n      if (renderedComponent === null || renderedComponent === false) {\n        renderedComponent = ReactEmptyComponent.getEmptyComponent();\n        ReactEmptyComponent.registerNullComponentID(this._rootNodeID);\n      } else {\n        ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);\n      }\n    } finally {\n      ReactContext.current = previousContext;\n      ReactCurrentOwner.current = null;\n    }\n    \"production\" !== process.env.NODE_ENV ? invariant(ReactElement.isValidElement(renderedComponent), '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.constructor.displayName || 'ReactCompositeComponent') : invariant(ReactElement.isValidElement(renderedComponent));\n    return renderedComponent;\n  }),\n  /**\n   * @private\n   */\n  _bindAutoBindMethods: function () {\n    for (var autoBindKey in this.__reactAutoBindMap) {\n      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n        continue;\n      }\n      var method = this.__reactAutoBindMap[autoBindKey];\n      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(method, this.constructor.displayName + '.' + autoBindKey));\n    }\n  },\n  /**\n   * Binds a method to the component.\n   *\n   * @param {function} method Method to be bound.\n   * @private\n   */\n  _bindAutoBindMethod: function (method) {\n    var component = this;\n    var boundMethod = method.bind(component);\n    if (\"production\" !== process.env.NODE_ENV) {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function (newThis) {\n        for (var args = [], $__0 = 1, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          monitorCodeUse('react_bind_warning', {\n            component: componentName\n          });\n          console.warn('bind(): React component methods may only be bound to the ' + 'component instance. See ' + componentName);\n        } else if (!args.length) {\n          monitorCodeUse('react_bind_warning', {\n            component: componentName\n          });\n          console.warn('bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See ' + componentName);\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n};\nvar ReactCompositeComponentBase = function () {};\nassign(ReactCompositeComponentBase.prototype, ReactComponent.Mixin, ReactOwner.Mixin, ReactPropTransferer.Mixin, ReactCompositeComponentMixin);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactCompositeComponent\n * @extends ReactComponent\n * @extends ReactOwner\n * @extends ReactPropTransferer\n */\nvar ReactCompositeComponent = {\n  LifeCycle: CompositeLifeCycle,\n  Base: ReactCompositeComponentBase,\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function (spec) {\n    var Constructor = function (props) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted. This will later be used\n      // by the stand-alone class implementation.\n    };\n    Constructor.prototype = new ReactCompositeComponentBase();\n    Constructor.prototype.constructor = Constructor;\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n    \"production\" !== process.env.NODE_ENV ? invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.') : invariant(Constructor.prototype.render);\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (Constructor.prototype.componentShouldUpdate) {\n        monitorCodeUse('react_component_should_update_warning', {\n          component: spec.displayName\n        });\n        console.warn((spec.displayName || 'A component') + ' has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.');\n      }\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactCompositeComponentInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n    if (\"production\" !== process.env.NODE_ENV) {\n      return ReactLegacyElement.wrapFactory(ReactElementValidator.createFactory(Constructor));\n    }\n    return ReactLegacyElement.wrapFactory(ReactElement.createFactory(Constructor));\n  },\n  injection: {\n    injectMixin: function (mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n};\nmodule.exports = ReactCompositeComponent;","map":{"version":3,"names":["ReactComponent","require","ReactContext","ReactCurrentOwner","ReactElement","ReactElementValidator","ReactEmptyComponent","ReactErrorUtils","ReactLegacyElement","ReactOwner","ReactPerf","ReactPropTransferer","ReactPropTypeLocations","ReactPropTypeLocationNames","ReactUpdates","assign","instantiateReactComponent","invariant","keyMirror","keyOf","monitorCodeUse","mapObject","shouldUpdateReactComponent","warning","MIXINS_KEY","mixins","SpecPolicy","DEFINE_ONCE","DEFINE_MANY","OVERRIDE_BASE","DEFINE_MANY_MERGED","injectedMixins","ReactCompositeComponentInterface","statics","propTypes","contextTypes","childContextTypes","getDefaultProps","getInitialState","getChildContext","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","updateComponent","RESERVED_SPEC_KEYS","displayName","Constructor","i","length","mixSpecIntoComponent","validateTypeDef","childContext","context","createMergedResultFunction","prop","mixStaticSpecIntoComponent","getDeclarationErrorAddendum","component","owner","_owner","constructor","typeDef","location","propName","hasOwnProperty","process","env","NODE_ENV","validateMethodOverride","proto","name","specPolicy","ReactCompositeComponentMixin","validateLifeCycleOnReplaceState","instance","compositeLifeCycleState","_compositeLifeCycleState","isMounted","CompositeLifeCycle","MOUNTING","current","UNMOUNTING","spec","isValidFactory","isValidElement","prototype","property","isCompositeComponentMethod","isAlreadyDefined","markedDontBind","__reactDontBind","isFunction","shouldAutoBind","__reactAutoBindMap","createChainedFunction","isReserved","isInherited","mergeObjectsWithNoDuplicateKeys","one","two","value","key","undefined","mergedResult","a","apply","arguments","b","chainedFunction","RECEIVING_PROPS","construct","element","Mixin","state","_pendingState","call","mountComponent","measure","rootID","transaction","mountDepth","_bindAutoBindMethods","_processContext","_currentElement","_context","props","_processProps","Array","isArray","_pendingForceUpdate","_renderedComponent","_renderValidatedComponent","type","markup","getReactMountReady","enqueue","unmountComponent","setState","partialState","callback","replaceState","completeState","enqueueUpdate","maskedContext","contextName","_checkPropTypes","_processChildContext","currentContext","newProps","componentName","error","Error","addendum","message","performUpdateIfNecessary","_pendingElement","nextContext","nextProps","nextElement","nextState","shouldUpdate","console","warn","_performComponentUpdate","prevElement","prevProps","prevState","prevContext","bind","receiveComponent","prevParentElement","prevComponentInstance","thisID","_rootNodeID","prevComponentID","nextMarkup","_mountDepth","BackendIDOperations","dangerouslyReplaceNodeWithMarkupByID","forceUpdate","renderedComponent","previousContext","getEmptyComponent","registerNullComponentID","deregisterNullComponentID","autoBindKey","method","_bindAutoBindMethod","guard","boundMethod","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","_bind","newThis","args","$__0","$__1","push","reboundMethod","ReactCompositeComponentBase","ReactCompositeComponent","LifeCycle","Base","createClass","forEach","defaultProps","componentShouldUpdate","methodName","wrapFactory","createFactory","injection","injectMixin","mixin","module","exports"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/node_modules/react-checkbox/node_modules/react/lib/ReactCompositeComponent.js"],"sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\nvar ReactLegacyElement = require(\"./ReactLegacyElement\");\nvar ReactOwner = require(\"./ReactOwner\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar keyOf = require(\"./keyOf\");\nvar monitorCodeUse = require(\"./monitorCodeUse\");\nvar mapObject = require(\"./mapObject\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\nvar warning = require(\"./warning\");\n\nvar MIXINS_KEY = keyOf({mixins: null});\n\n/**\n * Policies that describe methods in `ReactCompositeComponentInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base ReactCompositeComponent class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\n\nvar injectedMixins = [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactCompositeComponent`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactCompositeComponentInterface\n * @internal\n */\nvar ReactCompositeComponentInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function(Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function(Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function(Constructor, childContextTypes) {\n    validateTypeDef(\n      Constructor,\n      childContextTypes,\n      ReactPropTypeLocations.childContext\n    );\n    Constructor.childContextTypes = assign(\n      {},\n      Constructor.childContextTypes,\n      childContextTypes\n    );\n  },\n  contextTypes: function(Constructor, contextTypes) {\n    validateTypeDef(\n      Constructor,\n      contextTypes,\n      ReactPropTypeLocations.context\n    );\n    Constructor.contextTypes = assign(\n      {},\n      Constructor.contextTypes,\n      contextTypes\n    );\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function(Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(\n        Constructor.getDefaultProps,\n        getDefaultProps\n      );\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function(Constructor, propTypes) {\n    validateTypeDef(\n      Constructor,\n      propTypes,\n      ReactPropTypeLocations.prop\n    );\n    Constructor.propTypes = assign(\n      {},\n      Constructor.propTypes,\n      propTypes\n    );\n  },\n  statics: function(Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  }\n};\n\nfunction getDeclarationErrorAddendum(component) {\n  var owner = component._owner || null;\n  if (owner && owner.constructor && owner.constructor.displayName) {\n    return ' Check the render method of `' + owner.constructor.displayName +\n      '`.';\n  }\n  return '';\n}\n\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof typeDef[propName] == 'function',\n        '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n        'React.PropTypes.',\n        Constructor.displayName || 'ReactCompositeComponent',\n        ReactPropTypeLocationNames[location],\n        propName\n      ) : invariant(typeof typeDef[propName] == 'function'));\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?\n    ReactCompositeComponentInterface[name] :\n    null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.OVERRIDE_BASE,\n      'ReactCompositeComponentInterface: You are attempting to override ' +\n      '`%s` from your class specification. Ensure that your method names ' +\n      'do not overlap with React methods.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.DEFINE_MANY ||\n      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,\n      'ReactCompositeComponentInterface: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be due ' +\n      'to a mixin.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||\n    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));\n  }\n}\n\nfunction validateLifeCycleOnReplaceState(instance) {\n  var compositeLifeCycleState = instance._compositeLifeCycleState;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    instance.isMounted() ||\n      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,\n    'replaceState(...): Can only update a mounted or mounting component.'\n  ) : invariant(instance.isMounted() ||\n    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactCurrentOwner.current == null,\n    'replaceState(...): Cannot update during an existing state transition ' +\n    '(such as within `render`). Render methods should be a pure function ' +\n    'of props and state.'\n  ) : invariant(ReactCurrentOwner.current == null));\n  (\"production\" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,\n    'replaceState(...): Cannot update while unmounting component. This ' +\n    'usually means you called setState() on an unmounted component.'\n  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building `ReactCompositeComponent` classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !ReactLegacyElement.isValidFactory(spec),\n    'ReactCompositeComponent: You\\'re attempting to ' +\n    'use a component class as a mixin. Instead, just use a regular object.'\n  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !ReactElement.isValidElement(spec),\n    'ReactCompositeComponent: You\\'re attempting to ' +\n    'use a component as a mixin. Instead, just use a regular object.'\n  ) : invariant(!ReactElement.isValidElement(spec)));\n\n  var proto = Constructor.prototype;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above\n      continue;\n    }\n\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactCompositeComponent methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isCompositeComponentMethod =\n        ReactCompositeComponentInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var markedDontBind = property && property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind =\n        isFunction &&\n        !isCompositeComponentMethod &&\n        !isAlreadyDefined &&\n        !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactCompositeComponentInterface[name];\n\n          // These cases should already be caught by validateMethodOverride\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            isCompositeComponentMethod && (\n              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||\n              specPolicy === SpecPolicy.DEFINE_MANY\n            ),\n            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +\n            'when mixing in component specs.',\n            specPolicy,\n            name\n          ) : invariant(isCompositeComponentMethod && (\n            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||\n            specPolicy === SpecPolicy.DEFINE_MANY\n          )));\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (\"production\" !== process.env.NODE_ENV) {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = name in RESERVED_SPEC_KEYS;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isReserved,\n      'ReactCompositeComponent: You are attempting to define a reserved ' +\n      'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n      'as an instance property instead; it will still be accessible on the ' +\n      'constructor.',\n      name\n    ) : invariant(!isReserved));\n\n    var isInherited = name in Constructor;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isInherited,\n      'ReactCompositeComponent: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be ' +\n      'due to a mixin.',\n      name\n    ) : invariant(!isInherited));\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeObjectsWithNoDuplicateKeys(one, two) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    one && two && typeof one === 'object' && typeof two === 'object',\n    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'\n  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));\n\n  mapObject(two, function(value, key) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      one[key] === undefined,\n      'mergeObjectsWithNoDuplicateKeys(): ' +\n      'Tried to merge two objects with the same key: `%s`. This conflict ' +\n      'may be due to a mixin; in particular, this may be caused by two ' +\n      'getInitialState() or getDefaultProps() methods returning objects ' +\n      'with clashing keys.',\n      key\n    ) : invariant(one[key] === undefined));\n    one[key] = value;\n  });\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    return mergeObjectsWithNoDuplicateKeys(a, b);\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * `ReactCompositeComponent` maintains an auxiliary life cycle state in\n * `this._compositeLifeCycleState` (which can be null).\n *\n * This is different from the life cycle state maintained by `ReactComponent` in\n * `this._lifeCycleState`. The following diagram shows how the states overlap in\n * time. There are times when the CompositeLifeCycle is null - at those times it\n * is only meaningful to look at ComponentLifeCycle alone.\n *\n * Top Row: ReactComponent.ComponentLifeCycle\n * Low Row: ReactComponent.CompositeLifeCycle\n *\n * +-------+---------------------------------+--------+\n * |  UN   |             MOUNTED             |   UN   |\n * |MOUNTED|                                 | MOUNTED|\n * +-------+---------------------------------+--------+\n * |       ^--------+   +-------+   +--------^        |\n * |       |        |   |       |   |        |        |\n * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |\n * |       |        |   |PROPS  |   |MOUNTING|        |\n * |       |        |   |       |   |        |        |\n * |       |        |   |       |   |        |        |\n * |       +--------+   +-------+   +--------+        |\n * |       |                                 |        |\n * +-------+---------------------------------+--------+\n */\nvar CompositeLifeCycle = keyMirror({\n  /**\n   * Components in the process of being mounted respond to state changes\n   * differently.\n   */\n  MOUNTING: null,\n  /**\n   * Components in the process of being unmounted are guarded against state\n   * changes.\n   */\n  UNMOUNTING: null,\n  /**\n   * Components that are mounted and receiving new props respond to state\n   * changes differently.\n   */\n  RECEIVING_PROPS: null\n});\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function(element) {\n    // Children can be either an array or more than one argument\n    ReactComponent.Mixin.construct.apply(this, arguments);\n    ReactOwner.Mixin.construct.apply(this, arguments);\n\n    this.state = null;\n    this._pendingState = null;\n\n    // This is the public post-processed context. The real context and pending\n    // context lives on the element.\n    this.context = null;\n\n    this._compositeLifeCycleState = null;\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function() {\n    return ReactComponent.Mixin.isMounted.call(this) &&\n      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    'mountComponent',\n    function(rootID, transaction, mountDepth) {\n      ReactComponent.Mixin.mountComponent.call(\n        this,\n        rootID,\n        transaction,\n        mountDepth\n      );\n      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;\n\n      if (this.__reactAutoBindMap) {\n        this._bindAutoBindMethods();\n      }\n\n      this.context = this._processContext(this._currentElement._context);\n      this.props = this._processProps(this.props);\n\n      this.state = this.getInitialState ? this.getInitialState() : null;\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof this.state === 'object' && !Array.isArray(this.state),\n        '%s.getInitialState(): must return an object or null',\n        this.constructor.displayName || 'ReactCompositeComponent'\n      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));\n\n      this._pendingState = null;\n      this._pendingForceUpdate = false;\n\n      if (this.componentWillMount) {\n        this.componentWillMount();\n        // When mounting, calls to `setState` by `componentWillMount` will set\n        // `this._pendingState` without triggering a re-render.\n        if (this._pendingState) {\n          this.state = this._pendingState;\n          this._pendingState = null;\n        }\n      }\n\n      this._renderedComponent = instantiateReactComponent(\n        this._renderValidatedComponent(),\n        this._currentElement.type // The wrapping type\n      );\n\n      // Done with mounting, `setState` will now trigger UI changes.\n      this._compositeLifeCycleState = null;\n      var markup = this._renderedComponent.mountComponent(\n        rootID,\n        transaction,\n        mountDepth + 1\n      );\n      if (this.componentDidMount) {\n        transaction.getReactMountReady().enqueue(this.componentDidMount, this);\n      }\n      return markup;\n    }\n  ),\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function() {\n    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n    this._compositeLifeCycleState = null;\n\n    this._renderedComponent.unmountComponent();\n    this._renderedComponent = null;\n\n    ReactComponent.Mixin.unmountComponent.call(this);\n\n    // Some existing components rely on this.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: this.props = null;\n    // TODO: this.state = null;\n  },\n\n  /**\n   * Sets a subset of the state. Always use this or `replaceState` to mutate\n   * state. You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * There is no guarantee that calls to `setState` will run synchronously,\n   * as they may eventually be batched together.  You can provide an optional\n   * callback that will be executed when the call to setState is actually\n   * completed.\n   *\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  setState: function(partialState, callback) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof partialState === 'object' || partialState == null,\n      'setState(...): takes an object of state variables to update.'\n    ) : invariant(typeof partialState === 'object' || partialState == null));\n    if (\"production\" !== process.env.NODE_ENV){\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        partialState != null,\n        'setState(...): You passed an undefined or null state object; ' +\n        'instead, use forceUpdate().'\n      ) : null);\n    }\n    // Merge with `_pendingState` if it exists, otherwise with existing state.\n    this.replaceState(\n      assign({}, this._pendingState || this.state, partialState),\n      callback\n    );\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  replaceState: function(completeState, callback) {\n    validateLifeCycleOnReplaceState(this);\n    this._pendingState = completeState;\n    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {\n      // If we're in a componentWillMount handler, don't enqueue a rerender\n      // because ReactUpdates assumes we're in a browser context (which is wrong\n      // for server rendering) and we're about to do a render anyway.\n      // TODO: The callback here is ignored when setState is called from\n      // componentWillMount. Either fix it or disallow doing so completely in\n      // favor of getInitialState.\n      ReactUpdates.enqueueUpdate(this, callback);\n    }\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function(context) {\n    var maskedContext = null;\n    var contextTypes = this.constructor.contextTypes;\n    if (contextTypes) {\n      maskedContext = {};\n      for (var contextName in contextTypes) {\n        maskedContext[contextName] = context[contextName];\n      }\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(\n          contextTypes,\n          maskedContext,\n          ReactPropTypeLocations.context\n        );\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function(currentContext) {\n    var childContext = this.getChildContext && this.getChildContext();\n    var displayName = this.constructor.displayName || 'ReactCompositeComponent';\n    if (childContext) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof this.constructor.childContextTypes === 'object',\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n        'use getChildContext().',\n        displayName\n      ) : invariant(typeof this.constructor.childContextTypes === 'object'));\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(\n          this.constructor.childContextTypes,\n          childContext,\n          ReactPropTypeLocations.childContext\n        );\n      }\n      for (var name in childContext) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          name in this.constructor.childContextTypes,\n          '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n          displayName,\n          name\n        ) : invariant(name in this.constructor.childContextTypes));\n      }\n      return assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function(newProps) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var propTypes = this.constructor.propTypes;\n      if (propTypes) {\n        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);\n      }\n    }\n    return newProps;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function(propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the element\n    // validation.\n    var componentName = this.constructor.displayName;\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error =\n          propTypes[propName](props, propName, componentName, location);\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // renderComponent calls, so I'm abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum = getDeclarationErrorAddendum(this);\n          (\"production\" !== process.env.NODE_ENV ? warning(false, error.message + addendum) : null);\n        }\n      }\n    }\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function(transaction) {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    // Do not trigger a state transition if we are in the middle of mounting or\n    // receiving props because both of those will already be doing this.\n    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||\n        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {\n      return;\n    }\n\n    if (this._pendingElement == null &&\n        this._pendingState == null &&\n        !this._pendingForceUpdate) {\n      return;\n    }\n\n    var nextContext = this.context;\n    var nextProps = this.props;\n    var nextElement = this._currentElement;\n    if (this._pendingElement != null) {\n      nextElement = this._pendingElement;\n      nextContext = this._processContext(nextElement._context);\n      nextProps = this._processProps(nextElement.props);\n      this._pendingElement = null;\n\n      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;\n      if (this.componentWillReceiveProps) {\n        this.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    this._compositeLifeCycleState = null;\n\n    var nextState = this._pendingState || this.state;\n    this._pendingState = null;\n\n    var shouldUpdate =\n      this._pendingForceUpdate ||\n      !this.shouldComponentUpdate ||\n      this.shouldComponentUpdate(nextProps, nextState, nextContext);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (typeof shouldUpdate === \"undefined\") {\n        console.warn(\n          (this.constructor.displayName || 'ReactCompositeComponent') +\n          '.shouldComponentUpdate(): Returned undefined instead of a ' +\n          'boolean value. Make sure to return true or false.'\n        );\n      }\n    }\n\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(\n        nextElement,\n        nextProps,\n        nextState,\n        nextContext,\n        transaction\n      );\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state.\n      this._currentElement = nextElement;\n      this.props = nextProps;\n      this.state = nextState;\n      this.context = nextContext;\n\n      // Owner cannot change because shouldUpdateReactComponent doesn't allow\n      // it. TODO: Remove this._owner completely.\n      this._owner = nextElement._owner;\n    }\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @private\n   */\n  _performComponentUpdate: function(\n    nextElement,\n    nextProps,\n    nextState,\n    nextContext,\n    transaction\n  ) {\n    var prevElement = this._currentElement;\n    var prevProps = this.props;\n    var prevState = this.state;\n    var prevContext = this.context;\n\n    if (this.componentWillUpdate) {\n      this.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this._currentElement = nextElement;\n    this.props = nextProps;\n    this.state = nextState;\n    this.context = nextContext;\n\n    // Owner cannot change because shouldUpdateReactComponent doesn't allow\n    // it. TODO: Remove this._owner completely.\n    this._owner = nextElement._owner;\n\n    this.updateComponent(\n      transaction,\n      prevElement\n    );\n\n    if (this.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(\n        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),\n        this\n      );\n    }\n  },\n\n  receiveComponent: function(nextElement, transaction) {\n    if (nextElement === this._currentElement &&\n        nextElement._owner != null) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for a element created outside a composite to be\n      // deeply mutated and reused.\n      return;\n    }\n\n    ReactComponent.Mixin.receiveComponent.call(\n      this,\n      nextElement,\n      transaction\n    );\n  },\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    'updateComponent',\n    function(transaction, prevParentElement) {\n      ReactComponent.Mixin.updateComponent.call(\n        this,\n        transaction,\n        prevParentElement\n      );\n\n      var prevComponentInstance = this._renderedComponent;\n      var prevElement = prevComponentInstance._currentElement;\n      var nextElement = this._renderValidatedComponent();\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        prevComponentInstance.receiveComponent(nextElement, transaction);\n      } else {\n        // These two IDs are actually the same! But nothing should rely on that.\n        var thisID = this._rootNodeID;\n        var prevComponentID = prevComponentInstance._rootNodeID;\n        prevComponentInstance.unmountComponent();\n        this._renderedComponent = instantiateReactComponent(\n          nextElement,\n          this._currentElement.type\n        );\n        var nextMarkup = this._renderedComponent.mountComponent(\n          thisID,\n          transaction,\n          this._mountDepth + 1\n        );\n        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(\n          prevComponentID,\n          nextMarkup\n        );\n      }\n    }\n  ),\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldUpdateComponent`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {?function} callback Called after update is complete.\n   * @final\n   * @protected\n   */\n  forceUpdate: function(callback) {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      this.isMounted() ||\n        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,\n      'forceUpdate(...): Can only force an update on mounted or mounting ' +\n        'components.'\n    ) : invariant(this.isMounted() ||\n      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&\n      ReactCurrentOwner.current == null,\n      'forceUpdate(...): Cannot force an update while unmounting component ' +\n      'or within a `render` function.'\n    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&\n    ReactCurrentOwner.current == null));\n    this._pendingForceUpdate = true;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    '_renderValidatedComponent',\n    function() {\n      var renderedComponent;\n      var previousContext = ReactContext.current;\n      ReactContext.current = this._processChildContext(\n        this._currentElement._context\n      );\n      ReactCurrentOwner.current = this;\n      try {\n        renderedComponent = this.render();\n        if (renderedComponent === null || renderedComponent === false) {\n          renderedComponent = ReactEmptyComponent.getEmptyComponent();\n          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);\n        } else {\n          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);\n        }\n      } finally {\n        ReactContext.current = previousContext;\n        ReactCurrentOwner.current = null;\n      }\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        ReactElement.isValidElement(renderedComponent),\n        '%s.render(): A valid ReactComponent must be returned. You may have ' +\n          'returned undefined, an array or some other invalid object.',\n        this.constructor.displayName || 'ReactCompositeComponent'\n      ) : invariant(ReactElement.isValidElement(renderedComponent)));\n      return renderedComponent;\n    }\n  ),\n\n  /**\n   * @private\n   */\n  _bindAutoBindMethods: function() {\n    for (var autoBindKey in this.__reactAutoBindMap) {\n      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n        continue;\n      }\n      var method = this.__reactAutoBindMap[autoBindKey];\n      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(\n        method,\n        this.constructor.displayName + '.' + autoBindKey\n      ));\n    }\n  },\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {function} method Method to be bound.\n   * @private\n   */\n  _bindAutoBindMethod: function(method) {\n    var component = this;\n    var boundMethod = method.bind(component);\n    if (\"production\" !== process.env.NODE_ENV) {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          monitorCodeUse('react_bind_warning', { component: componentName });\n          console.warn(\n            'bind(): React component methods may only be bound to the ' +\n            'component instance. See ' + componentName\n          );\n        } else if (!args.length) {\n          monitorCodeUse('react_bind_warning', { component: componentName });\n          console.warn(\n            'bind(): You are binding a component method to the component. ' +\n            'React does this for you automatically in a high-performance ' +\n            'way, so you can safely remove this call. See ' + componentName\n          );\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n};\n\nvar ReactCompositeComponentBase = function() {};\nassign(\n  ReactCompositeComponentBase.prototype,\n  ReactComponent.Mixin,\n  ReactOwner.Mixin,\n  ReactPropTransferer.Mixin,\n  ReactCompositeComponentMixin\n);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactCompositeComponent\n * @extends ReactComponent\n * @extends ReactOwner\n * @extends ReactPropTransferer\n */\nvar ReactCompositeComponent = {\n\n  LifeCycle: CompositeLifeCycle,\n\n  Base: ReactCompositeComponentBase,\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function(spec) {\n    var Constructor = function(props) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted. This will later be used\n      // by the stand-alone class implementation.\n    };\n    Constructor.prototype = new ReactCompositeComponentBase();\n    Constructor.prototype.constructor = Constructor;\n\n    injectedMixins.forEach(\n      mixSpecIntoComponent.bind(null, Constructor)\n    );\n\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    ) : invariant(Constructor.prototype.render));\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (Constructor.prototype.componentShouldUpdate) {\n        monitorCodeUse(\n          'react_component_should_update_warning',\n          { component: spec.displayName }\n        );\n        console.warn(\n          (spec.displayName || 'A component') + ' has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.'\n         );\n      }\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactCompositeComponentInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      return ReactLegacyElement.wrapFactory(\n        ReactElementValidator.createFactory(Constructor)\n      );\n    }\n    return ReactLegacyElement.wrapFactory(\n      ReactElement.createFactory(Constructor)\n    );\n  },\n\n  injection: {\n    injectMixin: function(mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n};\n\nmodule.exports = ReactCompositeComponent;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AACtD,IAAIG,YAAY,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAII,qBAAqB,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AAC9D,IAAIK,mBAAmB,GAAGL,OAAO,CAAC,uBAAuB,CAAC;AAC1D,IAAIM,eAAe,GAAGN,OAAO,CAAC,mBAAmB,CAAC;AAClD,IAAIO,kBAAkB,GAAGP,OAAO,CAAC,sBAAsB,CAAC;AACxD,IAAIQ,UAAU,GAAGR,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIS,SAAS,GAAGT,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIU,mBAAmB,GAAGV,OAAO,CAAC,uBAAuB,CAAC;AAC1D,IAAIW,sBAAsB,GAAGX,OAAO,CAAC,0BAA0B,CAAC;AAChE,IAAIY,0BAA0B,GAAGZ,OAAO,CAAC,8BAA8B,CAAC;AACxE,IAAIa,YAAY,GAAGb,OAAO,CAAC,gBAAgB,CAAC;AAE5C,IAAIc,MAAM,GAAGd,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAIe,yBAAyB,GAAGf,OAAO,CAAC,6BAA6B,CAAC;AACtE,IAAIgB,SAAS,GAAGhB,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIiB,SAAS,GAAGjB,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIkB,KAAK,GAAGlB,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAImB,cAAc,GAAGnB,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIoB,SAAS,GAAGpB,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIqB,0BAA0B,GAAGrB,OAAO,CAAC,8BAA8B,CAAC;AACxE,IAAIsB,OAAO,GAAGtB,OAAO,CAAC,WAAW,CAAC;AAElC,IAAIuB,UAAU,GAAGL,KAAK,CAAC;EAACM,MAAM,EAAE;AAAI,CAAC,CAAC;;AAEtC;AACA;AACA;AACA,IAAIC,UAAU,GAAGR,SAAS,CAAC;EACzB;AACF;AACA;EACES,WAAW,EAAE,IAAI;EACjB;AACF;AACA;AACA;EACEC,WAAW,EAAE,IAAI;EACjB;AACF;AACA;EACEC,aAAa,EAAE,IAAI;EACnB;AACF;AACA;AACA;AACA;EACEC,kBAAkB,EAAE;AACtB,CAAC,CAAC;AAGF,IAAIC,cAAc,GAAG,EAAE;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,gCAAgC,GAAG;EAErC;AACF;AACA;AACA;AACA;AACA;EACEP,MAAM,EAAEC,UAAU,CAACE,WAAW;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,OAAO,EAAEP,UAAU,CAACE,WAAW;EAE/B;AACF;AACA;AACA;AACA;AACA;EACEM,SAAS,EAAER,UAAU,CAACE,WAAW;EAEjC;AACF;AACA;AACA;AACA;AACA;EACEO,YAAY,EAAET,UAAU,CAACE,WAAW;EAEpC;AACF;AACA;AACA;AACA;AACA;EACEQ,iBAAiB,EAAEV,UAAU,CAACE,WAAW;EAEzC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,eAAe,EAAEX,UAAU,CAACI,kBAAkB;EAE9C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,eAAe,EAAEZ,UAAU,CAACI,kBAAkB;EAE9C;AACF;AACA;AACA;EACES,eAAe,EAAEb,UAAU,CAACI,kBAAkB;EAE9C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEU,MAAM,EAAEd,UAAU,CAACC,WAAW;EAI9B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEc,kBAAkB,EAAEf,UAAU,CAACE,WAAW;EAE1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,iBAAiB,EAAEhB,UAAU,CAACE,WAAW;EAEzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEe,yBAAyB,EAAEjB,UAAU,CAACE,WAAW;EAEjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgB,qBAAqB,EAAElB,UAAU,CAACC,WAAW;EAE7C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkB,mBAAmB,EAAEnB,UAAU,CAACE,WAAW;EAE3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkB,kBAAkB,EAAEpB,UAAU,CAACE,WAAW;EAE1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmB,oBAAoB,EAAErB,UAAU,CAACE,WAAW;EAI5C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,eAAe,EAAEtB,UAAU,CAACG;AAE9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIoB,kBAAkB,GAAG;EACvBC,WAAW,EAAE,SAAAA,CAASC,WAAW,EAAED,WAAW,EAAE;IAC9CC,WAAW,CAACD,WAAW,GAAGA,WAAW;EACvC,CAAC;EACDzB,MAAM,EAAE,SAAAA,CAAS0B,WAAW,EAAE1B,MAAM,EAAE;IACpC,IAAIA,MAAM,EAAE;MACV,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,MAAM,CAAC4B,MAAM,EAAED,CAAC,EAAE,EAAE;QACtCE,oBAAoB,CAACH,WAAW,EAAE1B,MAAM,CAAC2B,CAAC,CAAC,CAAC;MAC9C;IACF;EACF,CAAC;EACDhB,iBAAiB,EAAE,SAAAA,CAASe,WAAW,EAAEf,iBAAiB,EAAE;IAC1DmB,eAAe,CACbJ,WAAW,EACXf,iBAAiB,EACjBx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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}