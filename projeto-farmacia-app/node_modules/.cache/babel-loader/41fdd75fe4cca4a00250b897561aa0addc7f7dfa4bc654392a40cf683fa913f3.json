{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\nvar flattenChildren = require(\"./flattenChildren\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction) {\n      var children = flattenChildren(nestedChildren);\n      var mountImages = [];\n      var index = 0;\n      this._renderedChildren = children;\n      for (var name in children) {\n        var child = children[name];\n        if (children.hasOwnProperty(name)) {\n          // The rendered children must be turned into instances as they're\n          // mounted.\n          var childInstance = instantiateReactComponent(child, null);\n          children[name] = childInstance;\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = childInstance.mountComponent(rootID, transaction, this._mountDepth + 1);\n          childInstance._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n      return mountImages;\n    },\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildren, transaction) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildren, transaction);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildren, transaction) {\n      var nextChildren = flattenChildren(nextNestedChildren);\n      var prevChildren = this._renderedChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var prevElement = prevChild && prevChild._currentElement;\n        var nextElement = nextChildren[name];\n        if (shouldUpdateReactComponent(prevElement, nextElement)) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild.receiveComponent(nextElement, transaction);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChildByName(prevChild, name);\n          }\n          // The child must be instantiated before it's mounted.\n          var nextChildInstance = instantiateReactComponent(nextElement, null);\n          this._mountChildByNameAtIndex(nextChildInstance, name, nextIndex, transaction);\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren[name])) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      for (var name in renderedChildren) {\n        var renderedChild = renderedChildren[name];\n        // TODO: When is this not true?\n        if (renderedChild.unmountComponent) {\n          renderedChild.unmountComponent();\n        }\n      }\n      this._renderedChildren = null;\n    },\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = child.mountComponent(rootID, transaction, this._mountDepth + 1);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n      this._renderedChildren = this._renderedChildren || {};\n      this._renderedChildren[name] = child;\n    },\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function (child, name) {\n      this.removeChild(child);\n      child._mountIndex = null;\n      child.unmountComponent();\n      delete this._renderedChildren[name];\n    }\n  }\n};\nmodule.exports = ReactMultiChild;","map":{"version":3,"names":["ReactComponent","require","ReactMultiChildUpdateTypes","flattenChildren","instantiateReactComponent","shouldUpdateReactComponent","updateDepth","updateQueue","markupQueue","enqueueMarkup","parentID","markup","toIndex","push","parentNode","type","INSERT_MARKUP","markupIndex","textContent","fromIndex","enqueueMove","MOVE_EXISTING","enqueueRemove","REMOVE_NODE","enqueueTextContent","TEXT_CONTENT","processQueue","length","BackendIDOperations","dangerouslyProcessChildrenUpdates","clearQueue","ReactMultiChild","Mixin","mountChildren","nestedChildren","transaction","children","mountImages","index","_renderedChildren","name","child","hasOwnProperty","childInstance","rootID","_rootNodeID","mountImage","mountComponent","_mountDepth","_mountIndex","updateTextContent","nextContent","errorThrown","prevChildren","_unmountChildByName","setTextContent","updateChildren","nextNestedChildren","_updateChildren","nextChildren","lastIndex","nextIndex","prevChild","prevElement","_currentElement","nextElement","moveChild","Math","max","receiveComponent","nextChildInstance","_mountChildByNameAtIndex","unmountChildren","renderedChildren","renderedChild","unmountComponent","createChild","removeChild","module","exports"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/node_modules/react-checkbox/node_modules/react/lib/ReactMultiChild.js"],"sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar flattenChildren = require(\"./flattenChildren\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(\n      updateQueue,\n      markupQueue\n    );\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function(nestedChildren, transaction) {\n      var children = flattenChildren(nestedChildren);\n      var mountImages = [];\n      var index = 0;\n      this._renderedChildren = children;\n      for (var name in children) {\n        var child = children[name];\n        if (children.hasOwnProperty(name)) {\n          // The rendered children must be turned into instances as they're\n          // mounted.\n          var childInstance = instantiateReactComponent(child, null);\n          children[name] = childInstance;\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = childInstance.mountComponent(\n            rootID,\n            transaction,\n            this._mountDepth + 1\n          );\n          childInstance._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function(nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function(nextNestedChildren, transaction) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildren, transaction);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function(nextNestedChildren, transaction) {\n      var nextChildren = flattenChildren(nextNestedChildren);\n      var prevChildren = this._renderedChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var prevElement = prevChild && prevChild._currentElement;\n        var nextElement = nextChildren[name];\n        if (shouldUpdateReactComponent(prevElement, nextElement)) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild.receiveComponent(nextElement, transaction);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChildByName(prevChild, name);\n          }\n          // The child must be instantiated before it's mounted.\n          var nextChildInstance = instantiateReactComponent(\n            nextElement,\n            null\n          );\n          this._mountChildByNameAtIndex(\n            nextChildInstance, name, nextIndex, transaction\n          );\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) &&\n            !(nextChildren && nextChildren[name])) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function() {\n      var renderedChildren = this._renderedChildren;\n      for (var name in renderedChildren) {\n        var renderedChild = renderedChildren[name];\n        // TODO: When is this not true?\n        if (renderedChild.unmountComponent) {\n          renderedChild.unmountComponent();\n        }\n      }\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function(child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function(child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function(child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function(textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function(child, name, index, transaction) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = child.mountComponent(\n        rootID,\n        transaction,\n        this._mountDepth + 1\n      );\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n      this._renderedChildren = this._renderedChildren || {};\n      this._renderedChildren[name] = child;\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function(child, name) {\n      this.removeChild(child);\n      child._mountIndex = null;\n      child.unmountComponent();\n      delete this._renderedChildren[name];\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}