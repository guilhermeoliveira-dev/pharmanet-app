{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\n// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string\nvar textarea = ReactElement.createFactory(ReactDOM.textarea.type);\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMTextarea',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  getInitialState: function () {\n    var defaultValue = this.props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = this.props.children;\n    if (children != null) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        \"production\" !== process.env.NODE_ENV ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : null;\n      }\n      \"production\" !== process.env.NODE_ENV ? invariant(defaultValue == null, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(defaultValue == null);\n      if (Array.isArray(children)) {\n        \"production\" !== process.env.NODE_ENV ? invariant(children.length <= 1, '<textarea> can only have at most one child.') : invariant(children.length <= 1);\n        children = children[0];\n      }\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(this);\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue)\n    };\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n    \"production\" !== process.env.NODE_ENV ? invariant(props.dangerouslySetInnerHTML == null, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(props.dangerouslySetInnerHTML == null);\n    props.defaultValue = null;\n    props.value = null;\n    props.onChange = this._handleChange;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    return textarea(props, this.state.initialValue);\n  },\n  componentDidUpdate: function (prevProps, prevState, prevContext) {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      var rootNode = this.getDOMNode();\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMTextarea;","map":{"version":3,"names":["AutoFocusMixin","require","DOMPropertyOperations","LinkedValueUtils","ReactBrowserComponentMixin","ReactCompositeComponent","ReactElement","ReactDOM","ReactUpdates","assign","invariant","warning","textarea","createFactory","type","forceUpdateIfMounted","isMounted","forceUpdate","ReactDOMTextarea","createClass","displayName","mixins","Mixin","getInitialState","defaultValue","props","children","process","env","NODE_ENV","Array","isArray","length","value","getValue","initialValue","render","dangerouslySetInnerHTML","onChange","_handleChange","state","componentDidUpdate","prevProps","prevState","prevContext","rootNode","getDOMNode","setValueForProperty","event","returnValue","getOnChange","call","asap","module","exports"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/node_modules/react-checkbox/node_modules/react/lib/ReactDOMTextarea.js"],"sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar warning = require(\"./warning\");\n\n// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string\nvar textarea = ReactElement.createFactory(ReactDOM.textarea.type);\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMTextarea',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = this.props.children;\n    if (children != null) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'Use the `defaultValue` or `value` props instead of setting ' +\n          'children on <textarea>.'\n        ) : null);\n      }\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        defaultValue == null,\n        'If you supply `defaultValue` on a <textarea>, do not pass children.'\n      ) : invariant(defaultValue == null));\n      if (Array.isArray(children)) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          children.length <= 1,\n          '<textarea> can only have at most one child.'\n        ) : invariant(children.length <= 1));\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(this);\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue)\n    };\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      props.dangerouslySetInnerHTML == null,\n      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'\n    ) : invariant(props.dangerouslySetInnerHTML == null));\n\n    props.defaultValue = null;\n    props.value = null;\n    props.onChange = this._handleChange;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    return textarea(props, this.state.initialValue);\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      var rootNode = this.getDOMNode();\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMTextarea;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}