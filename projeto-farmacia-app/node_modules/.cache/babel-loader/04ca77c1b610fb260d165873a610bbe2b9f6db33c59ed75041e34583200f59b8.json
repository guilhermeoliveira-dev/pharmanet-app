{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTextComponent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar assign = require(\"./Object.assign\");\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactTextComponent = function (props) {\n  // This constructor and it's argument is currently used by mocks.\n};\nassign(ReactTextComponent.prototype, ReactComponent.Mixin, {\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(this, rootID, transaction, mountDepth);\n    var escapedText = escapeTextForBrowser(this.props);\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n    return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';\n  },\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {object} nextComponent Contains the next text content.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextComponent, transaction) {\n    var nextProps = nextComponent.props;\n    if (nextProps !== this.props) {\n      this.props = nextProps;\n      ReactComponent.BackendIDOperations.updateTextContentByID(this._rootNodeID, nextProps);\n    }\n  }\n});\nvar ReactTextComponentFactory = function (text) {\n  // Bypass validation and configuration\n  return new ReactElement(ReactTextComponent, null, null, null, null, text);\n};\nReactTextComponentFactory.type = ReactTextComponent;\nmodule.exports = ReactTextComponentFactory;","map":{"version":3,"names":["DOMPropertyOperations","require","ReactComponent","ReactElement","assign","escapeTextForBrowser","ReactTextComponent","props","prototype","Mixin","mountComponent","rootID","transaction","mountDepth","call","escapedText","renderToStaticMarkup","createMarkupForID","receiveComponent","nextComponent","nextProps","BackendIDOperations","updateTextContentByID","_rootNodeID","ReactTextComponentFactory","text","type","module","exports"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/node_modules/react-checkbox/node_modules/react/lib/ReactTextComponent.js"],"sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTextComponent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar assign = require(\"./Object.assign\");\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactTextComponent = function(props) {\n  // This constructor and it's argument is currently used by mocks.\n};\n\nassign(ReactTextComponent.prototype, ReactComponent.Mixin, {\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(\n      this,\n      rootID,\n      transaction,\n      mountDepth\n    );\n\n    var escapedText = escapeTextForBrowser(this.props);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return (\n      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +\n        escapedText +\n      '</span>'\n    );\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {object} nextComponent Contains the next text content.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function(nextComponent, transaction) {\n    var nextProps = nextComponent.props;\n    if (nextProps !== this.props) {\n      this.props = nextProps;\n      ReactComponent.BackendIDOperations.updateTextContentByID(\n        this._rootNodeID,\n        nextProps\n      );\n    }\n  }\n\n});\n\nvar ReactTextComponentFactory = function(text) {\n  // Bypass validation and configuration\n  return new ReactElement(ReactTextComponent, null, null, null, null, text);\n};\n\nReactTextComponentFactory.type = ReactTextComponent;\n\nmodule.exports = ReactTextComponentFactory;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAC9D,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIE,YAAY,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAE5C,IAAIG,MAAM,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAII,oBAAoB,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,kBAAkB,GAAG,SAAAA,CAASC,KAAK,EAAE;EACvC;AAAA,CACD;AAEDH,MAAM,CAACE,kBAAkB,CAACE,SAAS,EAAEN,cAAc,CAACO,KAAK,EAAE;EAEzD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,cAAc,EAAE,SAAAA,CAASC,MAAM,EAAEC,WAAW,EAAEC,UAAU,EAAE;IACxDX,cAAc,CAACO,KAAK,CAACC,cAAc,CAACI,IAAI,CACtC,IAAI,EACJH,MAAM,EACNC,WAAW,EACXC,UACF,CAAC;IAED,IAAIE,WAAW,GAAGV,oBAAoB,CAAC,IAAI,CAACE,KAAK,CAAC;IAElD,IAAIK,WAAW,CAACI,oBAAoB,EAAE;MACpC;MACA;MACA;MACA,OAAOD,WAAW;IACpB;IAEA,OACE,QAAQ,GAAGf,qBAAqB,CAACiB,iBAAiB,CAACN,MAAM,CAAC,GAAG,GAAG,GAC9DI,WAAW,GACb,SAAS;EAEb,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,gBAAgB,EAAE,SAAAA,CAASC,aAAa,EAAEP,WAAW,EAAE;IACrD,IAAIQ,SAAS,GAAGD,aAAa,CAACZ,KAAK;IACnC,IAAIa,SAAS,KAAK,IAAI,CAACb,KAAK,EAAE;MAC5B,IAAI,CAACA,KAAK,GAAGa,SAAS;MACtBlB,cAAc,CAACmB,mBAAmB,CAACC,qBAAqB,CACtD,IAAI,CAACC,WAAW,EAChBH,SACF,CAAC;IACH;EACF;AAEF,CAAC,CAAC;AAEF,IAAII,yBAAyB,GAAG,SAAAA,CAASC,IAAI,EAAE;EAC7C;EACA,OAAO,IAAItB,YAAY,CAACG,kBAAkB,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAEmB,IAAI,CAAC;AAC3E,CAAC;AAEDD,yBAAyB,CAACE,IAAI,GAAGpB,kBAAkB;AAEnDqB,MAAM,CAACC,OAAO,GAAGJ,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}