{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar SyntheticInputEvent = require(\"./SyntheticInputEvent\");\nvar keyOf = require(\"./keyOf\");\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !('documentMode' in document || isPresto());\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onBeforeInput: null\n      }),\n      captured: keyOf({\n        onBeforeInputCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  }\n};\n\n// Track characters inserted via keypress and composition events.\nvar fallbackChars = null;\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n */\nvar BeforeInputEventPlugin = {\n  eventTypes: eventTypes,\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var chars;\n    if (canUseTextInputEvent) {\n      switch (topLevelType) {\n        case topLevelTypes.topKeyPress:\n          /**\n           * If native `textInput` events are available, our goal is to make\n           * use of them. However, there is a special case: the spacebar key.\n           * In Webkit, preventing default on a spacebar `textInput` event\n           * cancels character insertion, but it *also* causes the browser\n           * to fall back to its default spacebar behavior of scrolling the\n           * page.\n           *\n           * Tracking at:\n           * https://code.google.com/p/chromium/issues/detail?id=355103\n           *\n           * To avoid this issue, use the keypress event as if no `textInput`\n           * event is available.\n           */\n          var which = nativeEvent.which;\n          if (which !== SPACEBAR_CODE) {\n            return;\n          }\n          hasSpaceKeypress = true;\n          chars = SPACEBAR_CHAR;\n          break;\n        case topLevelTypes.topTextInput:\n          // Record the characters to be added to the DOM.\n          chars = nativeEvent.data;\n\n          // If it's a spacebar character, assume that we have already handled\n          // it at the keypress level and bail immediately. Android Chrome\n          // doesn't give us keycodes, so we need to blacklist it.\n          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n            return;\n          }\n\n          // Otherwise, carry on.\n          break;\n        default:\n          // For other native event types, do nothing.\n          return;\n      }\n    } else {\n      switch (topLevelType) {\n        case topLevelTypes.topPaste:\n          // If a paste event occurs after a keypress, throw out the input\n          // chars. Paste events should not lead to BeforeInput events.\n          fallbackChars = null;\n          break;\n        case topLevelTypes.topKeyPress:\n          /**\n           * As of v27, Firefox may fire keypress events even when no character\n           * will be inserted. A few possibilities:\n           *\n           * - `which` is `0`. Arrow keys, Esc key, etc.\n           *\n           * - `which` is the pressed key code, but no char is available.\n           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n           *   this key combination and no character is inserted into the\n           *   document, but FF fires the keypress for char code `100` anyway.\n           *   No `input` event will occur.\n           *\n           * - `which` is the pressed key code, but a command combination is\n           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n           *   `input` event will occur.\n           */\n          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n            fallbackChars = String.fromCharCode(nativeEvent.which);\n          }\n          break;\n        case topLevelTypes.topCompositionEnd:\n          fallbackChars = nativeEvent.data;\n          break;\n      }\n\n      // If no changes have occurred to the fallback string, no relevant\n      // event has fired and we're done.\n      if (fallbackChars === null) {\n        return;\n      }\n      chars = fallbackChars;\n    }\n\n    // If no characters are being inserted, no BeforeInput event should\n    // be fired.\n    if (!chars) {\n      return;\n    }\n    var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent);\n    event.data = chars;\n    fallbackChars = null;\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  }\n};\nmodule.exports = BeforeInputEventPlugin;","map":{"version":3,"names":["EventConstants","require","EventPropagators","ExecutionEnvironment","SyntheticInputEvent","keyOf","canUseTextInputEvent","canUseDOM","window","document","isPresto","opera","version","parseInt","SPACEBAR_CODE","SPACEBAR_CHAR","String","fromCharCode","topLevelTypes","eventTypes","beforeInput","phasedRegistrationNames","bubbled","onBeforeInput","captured","onBeforeInputCapture","dependencies","topCompositionEnd","topKeyPress","topTextInput","topPaste","fallbackChars","hasSpaceKeypress","isKeypressCommand","nativeEvent","ctrlKey","altKey","metaKey","BeforeInputEventPlugin","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","chars","which","data","event","getPooled","accumulateTwoPhaseDispatches","module","exports"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/node_modules/react-checkbox/node_modules/react/lib/BeforeInputEventPlugin.js"],"sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar SyntheticInputEvent = require(\"./SyntheticInputEvent\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar canUseTextInputEvent = (\n  ExecutionEnvironment.canUseDOM &&\n  'TextEvent' in window &&\n  !('documentMode' in document || isPresto())\n);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return (\n    typeof opera === 'object' &&\n    typeof opera.version === 'function' &&\n    parseInt(opera.version(), 10) <= 12\n  );\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onBeforeInput: null}),\n      captured: keyOf({onBeforeInputCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topTextInput,\n      topLevelTypes.topPaste\n    ]\n  }\n};\n\n// Track characters inserted via keypress and composition events.\nvar fallbackChars = null;\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (\n    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n    // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n  );\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var chars;\n\n    if (canUseTextInputEvent) {\n      switch (topLevelType) {\n        case topLevelTypes.topKeyPress:\n          /**\n           * If native `textInput` events are available, our goal is to make\n           * use of them. However, there is a special case: the spacebar key.\n           * In Webkit, preventing default on a spacebar `textInput` event\n           * cancels character insertion, but it *also* causes the browser\n           * to fall back to its default spacebar behavior of scrolling the\n           * page.\n           *\n           * Tracking at:\n           * https://code.google.com/p/chromium/issues/detail?id=355103\n           *\n           * To avoid this issue, use the keypress event as if no `textInput`\n           * event is available.\n           */\n          var which = nativeEvent.which;\n          if (which !== SPACEBAR_CODE) {\n            return;\n          }\n\n          hasSpaceKeypress = true;\n          chars = SPACEBAR_CHAR;\n          break;\n\n        case topLevelTypes.topTextInput:\n          // Record the characters to be added to the DOM.\n          chars = nativeEvent.data;\n\n          // If it's a spacebar character, assume that we have already handled\n          // it at the keypress level and bail immediately. Android Chrome\n          // doesn't give us keycodes, so we need to blacklist it.\n          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n            return;\n          }\n\n          // Otherwise, carry on.\n          break;\n\n        default:\n          // For other native event types, do nothing.\n          return;\n      }\n    } else {\n      switch (topLevelType) {\n        case topLevelTypes.topPaste:\n          // If a paste event occurs after a keypress, throw out the input\n          // chars. Paste events should not lead to BeforeInput events.\n          fallbackChars = null;\n          break;\n        case topLevelTypes.topKeyPress:\n          /**\n           * As of v27, Firefox may fire keypress events even when no character\n           * will be inserted. A few possibilities:\n           *\n           * - `which` is `0`. Arrow keys, Esc key, etc.\n           *\n           * - `which` is the pressed key code, but no char is available.\n           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n           *   this key combination and no character is inserted into the\n           *   document, but FF fires the keypress for char code `100` anyway.\n           *   No `input` event will occur.\n           *\n           * - `which` is the pressed key code, but a command combination is\n           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n           *   `input` event will occur.\n           */\n          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n            fallbackChars = String.fromCharCode(nativeEvent.which);\n          }\n          break;\n        case topLevelTypes.topCompositionEnd:\n          fallbackChars = nativeEvent.data;\n          break;\n      }\n\n      // If no changes have occurred to the fallback string, no relevant\n      // event has fired and we're done.\n      if (fallbackChars === null) {\n        return;\n      }\n\n      chars = fallbackChars;\n    }\n\n    // If no characters are being inserted, no BeforeInput event should\n    // be fired.\n    if (!chars) {\n      return;\n    }\n\n    var event = SyntheticInputEvent.getPooled(\n      eventTypes.beforeInput,\n      topLevelTargetID,\n      nativeEvent\n    );\n\n    event.data = chars;\n    fallbackChars = null;\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}