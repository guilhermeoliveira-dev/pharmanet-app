{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n\"use strict\";\n\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar Transaction = require(\"./Transaction\");\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\nassign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b);\n    } else {\n      transaction.perform(callback, null, a, b);\n    }\n  }\n};\nmodule.exports = ReactDefaultBatchingStrategy;","map":{"version":3,"names":["ReactUpdates","require","Transaction","assign","emptyFunction","RESET_BATCHED_UPDATES","initialize","close","ReactDefaultBatchingStrategy","isBatchingUpdates","FLUSH_BATCHED_UPDATES","flushBatchedUpdates","bind","TRANSACTION_WRAPPERS","ReactDefaultBatchingStrategyTransaction","reinitializeTransaction","prototype","Mixin","getTransactionWrappers","transaction","batchedUpdates","callback","a","b","alreadyBatchingUpdates","perform","module","exports"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/node_modules/react-checkbox/node_modules/react/lib/ReactDefaultBatchingStrategy.js"],"sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n\"use strict\";\n\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function() {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\nassign(\n  ReactDefaultBatchingStrategyTransaction.prototype,\n  Transaction.Mixin,\n  {\n    getTransactionWrappers: function() {\n      return TRANSACTION_WRAPPERS;\n    }\n  }\n);\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function(callback, a, b) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b);\n    } else {\n      transaction.perform(callback, null, a, b);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAe,CAAC;AAE1C,IAAIE,MAAM,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAIG,aAAa,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAE9C,IAAII,qBAAqB,GAAG;EAC1BC,UAAU,EAAEF,aAAa;EACzBG,KAAK,EAAE,SAAAA,CAAA,EAAW;IAChBC,4BAA4B,CAACC,iBAAiB,GAAG,KAAK;EACxD;AACF,CAAC;AAED,IAAIC,qBAAqB,GAAG;EAC1BJ,UAAU,EAAEF,aAAa;EACzBG,KAAK,EAAEP,YAAY,CAACW,mBAAmB,CAACC,IAAI,CAACZ,YAAY;AAC3D,CAAC;AAED,IAAIa,oBAAoB,GAAG,CAACH,qBAAqB,EAAEL,qBAAqB,CAAC;AAEzE,SAASS,uCAAuCA,CAAA,EAAG;EACjD,IAAI,CAACC,uBAAuB,CAAC,CAAC;AAChC;AAEAZ,MAAM,CACJW,uCAAuC,CAACE,SAAS,EACjDd,WAAW,CAACe,KAAK,EACjB;EACEC,sBAAsB,EAAE,SAAAA,CAAA,EAAW;IACjC,OAAOL,oBAAoB;EAC7B;AACF,CACF,CAAC;AAED,IAAIM,WAAW,GAAG,IAAIL,uCAAuC,CAAC,CAAC;AAE/D,IAAIN,4BAA4B,GAAG;EACjCC,iBAAiB,EAAE,KAAK;EAExB;AACF;AACA;AACA;EACEW,cAAc,EAAE,SAAAA,CAASC,QAAQ,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACvC,IAAIC,sBAAsB,GAAGhB,4BAA4B,CAACC,iBAAiB;IAE3ED,4BAA4B,CAACC,iBAAiB,GAAG,IAAI;;IAErD;IACA,IAAIe,sBAAsB,EAAE;MAC1BH,QAAQ,CAACC,CAAC,EAAEC,CAAC,CAAC;IAChB,CAAC,MAAM;MACLJ,WAAW,CAACM,OAAO,CAACJ,QAAQ,EAAE,IAAI,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAC3C;EACF;AACF,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAGnB,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}