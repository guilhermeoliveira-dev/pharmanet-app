{"ast":null,"code":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\nif (\"production\" !== process.env.NODE_ENV) {\n  warning = function (condition, format) {\n    for (var args = [], $__0 = 2, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n    if (!condition) {\n      var argIndex = 0;\n      console.warn('Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n    }\n  };\n}\nmodule.exports = warning;","map":{"version":3,"names":["emptyFunction","require","warning","process","env","NODE_ENV","condition","format","args","$__0","$__1","arguments","length","push","undefined","Error","argIndex","console","warn","replace","module","exports"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/node_modules/react-checkbox/node_modules/react/lib/warning.js"],"sourcesContent":["/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (\"production\" !== process.env.NODE_ENV) {\n  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GAAGF,aAAa;AAE3B,IAAI,YAAY,KAAKG,OAAO,CAACC,GAAG,CAACC,QAAQ,EAAE;EACzCH,OAAO,GAAG,SAAAA,CAASI,SAAS,EAAEC,MAAM,EAAG;IAAC,KAAK,IAAIC,IAAI,GAAC,EAAE,EAACC,IAAI,GAAC,CAAC,EAACC,IAAI,GAACC,SAAS,CAACC,MAAM,EAACH,IAAI,GAACC,IAAI,EAACD,IAAI,EAAE,EAAED,IAAI,CAACK,IAAI,CAACF,SAAS,CAACF,IAAI,CAAC,CAAC;IAChI,IAAIF,MAAM,KAAKO,SAAS,EAAE;MACxB,MAAM,IAAIC,KAAK,CACb,2DAA2D,GAC3D,kBACF,CAAC;IACH;IAEA,IAAI,CAACT,SAAS,EAAE;MACd,IAAIU,QAAQ,GAAG,CAAC;MAChBC,OAAO,CAACC,IAAI,CAAC,WAAW,GAAGX,MAAM,CAACY,OAAO,CAAC,KAAK,EAAE,YAAY;QAAC,OAAOX,IAAI,CAACQ,QAAQ,EAAE,CAAC;MAAC,CAAC,CAAC,CAAC;IAC3F;EACF,CAAC;AACH;AAEAI,MAAM,CAACC,OAAO,GAAGnB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}