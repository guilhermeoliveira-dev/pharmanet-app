{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar assign = require(\"./Object.assign\");\n\n// Store a reference to the <select> `ReactDOMComponent`. TODO: use string\nvar select = ReactElement.createFactory(ReactDOM.select.type);\nfunction updateWithPendingValueIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.setState({\n      value: this._pendingValue\n    });\n    this._pendingValue = 0;\n  }\n}\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return;\n  }\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\"The `\" + propName + \"` prop supplied to <select> must be an array if \" + \"`multiple` is true.\");\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\"The `\" + propName + \"` prop supplied to <select> must be a scalar \" + \"value if `multiple` is false.\");\n    }\n  }\n}\n\n/**\n * If `value` is supplied, updates <option> elements on mount and update.\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {?*} propValue For uncontrolled components, null/undefined. For\n * controlled components, a string (or with `multiple`, a list of strings).\n * @private\n */\nfunction updateOptions(component, propValue) {\n  var multiple = component.props.multiple;\n  var value = propValue != null ? propValue : component.state.value;\n  var options = component.getDOMNode().options;\n  var selectedValue, i, l;\n  if (multiple) {\n    selectedValue = {};\n    for (i = 0, l = value.length; i < l; ++i) {\n      selectedValue['' + value[i]] = true;\n    }\n  } else {\n    selectedValue = '' + value;\n  }\n  for (i = 0, l = options.length; i < l; i++) {\n    var selected = multiple ? selectedValue.hasOwnProperty(options[i].value) : options[i].value === selectedValue;\n    if (selected !== options[i].selected) {\n      options[i].selected = selected;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * string. If `multiple` is true, the prop must be an array of strings.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMSelect',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n  getInitialState: function () {\n    return {\n      value: this.props.defaultValue || (this.props.multiple ? [] : '')\n    };\n  },\n  componentWillMount: function () {\n    this._pendingValue = null;\n  },\n  componentWillReceiveProps: function (nextProps) {\n    if (!this.props.multiple && nextProps.multiple) {\n      this.setState({\n        value: [this.state.value]\n      });\n    } else if (this.props.multiple && !nextProps.multiple) {\n      this.setState({\n        value: this.state.value[0]\n      });\n    }\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n    props.onChange = this._handleChange;\n    props.value = null;\n    return select(props, this.props.children);\n  },\n  componentDidMount: function () {\n    updateOptions(this, LinkedValueUtils.getValue(this));\n  },\n  componentDidUpdate: function (prevProps) {\n    var value = LinkedValueUtils.getValue(this);\n    var prevMultiple = !!prevProps.multiple;\n    var multiple = !!this.props.multiple;\n    if (value != null || prevMultiple !== multiple) {\n      updateOptions(this, value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    var selectedValue;\n    if (this.props.multiple) {\n      selectedValue = [];\n      var options = event.target.options;\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          selectedValue.push(options[i].value);\n        }\n      }\n    } else {\n      selectedValue = event.target.value;\n    }\n    this._pendingValue = selectedValue;\n    ReactUpdates.asap(updateWithPendingValueIfMounted, this);\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMSelect;","map":{"version":3,"names":["AutoFocusMixin","require","LinkedValueUtils","ReactBrowserComponentMixin","ReactCompositeComponent","ReactElement","ReactDOM","ReactUpdates","assign","select","createFactory","type","updateWithPendingValueIfMounted","isMounted","setState","value","_pendingValue","selectValueType","props","propName","componentName","multiple","Array","isArray","Error","updateOptions","component","propValue","state","options","getDOMNode","selectedValue","i","l","length","selected","hasOwnProperty","ReactDOMSelect","createClass","displayName","mixins","Mixin","propTypes","defaultValue","getInitialState","componentWillMount","componentWillReceiveProps","nextProps","render","onChange","_handleChange","children","componentDidMount","getValue","componentDidUpdate","prevProps","prevMultiple","event","returnValue","getOnChange","call","target","push","asap","module","exports"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/node_modules/react-checkbox/node_modules/react/lib/ReactDOMSelect.js"],"sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\n// Store a reference to the <select> `ReactDOMComponent`. TODO: use string\nvar select = ReactElement.createFactory(ReactDOM.select.type);\n\nfunction updateWithPendingValueIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.setState({value: this._pendingValue});\n    this._pendingValue = 0;\n  }\n}\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return;\n  }\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be an array if \") +\n        (\"`multiple` is true.\")\n      );\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be a scalar \") +\n        (\"value if `multiple` is false.\")\n      );\n    }\n  }\n}\n\n/**\n * If `value` is supplied, updates <option> elements on mount and update.\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {?*} propValue For uncontrolled components, null/undefined. For\n * controlled components, a string (or with `multiple`, a list of strings).\n * @private\n */\nfunction updateOptions(component, propValue) {\n  var multiple = component.props.multiple;\n  var value = propValue != null ? propValue : component.state.value;\n  var options = component.getDOMNode().options;\n  var selectedValue, i, l;\n  if (multiple) {\n    selectedValue = {};\n    for (i = 0, l = value.length; i < l; ++i) {\n      selectedValue['' + value[i]] = true;\n    }\n  } else {\n    selectedValue = '' + value;\n  }\n  for (i = 0, l = options.length; i < l; i++) {\n    var selected = multiple ?\n      selectedValue.hasOwnProperty(options[i].value) :\n      options[i].value === selectedValue;\n\n    if (selected !== options[i].selected) {\n      options[i].selected = selected;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * string. If `multiple` is true, the prop must be an array of strings.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMSelect',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n\n  getInitialState: function() {\n    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};\n  },\n\n  componentWillMount: function() {\n    this._pendingValue = null;\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    if (!this.props.multiple && nextProps.multiple) {\n      this.setState({value: [this.state.value]});\n    } else if (this.props.multiple && !nextProps.multiple) {\n      this.setState({value: this.state.value[0]});\n    }\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    props.onChange = this._handleChange;\n    props.value = null;\n\n    return select(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    updateOptions(this, LinkedValueUtils.getValue(this));\n  },\n\n  componentDidUpdate: function(prevProps) {\n    var value = LinkedValueUtils.getValue(this);\n    var prevMultiple = !!prevProps.multiple;\n    var multiple = !!this.props.multiple;\n    if (value != null || prevMultiple !== multiple) {\n      updateOptions(this, value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n\n    var selectedValue;\n    if (this.props.multiple) {\n      selectedValue = [];\n      var options = event.target.options;\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          selectedValue.push(options[i].value);\n        }\n      }\n    } else {\n      selectedValue = event.target.value;\n    }\n\n    this._pendingValue = selectedValue;\n    ReactUpdates.asap(updateWithPendingValueIfMounted, this);\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMSelect;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}