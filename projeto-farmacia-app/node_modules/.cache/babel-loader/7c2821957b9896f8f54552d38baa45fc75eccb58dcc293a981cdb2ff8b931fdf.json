{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/src/views/landing-page.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\n\n// import Card from '../components/card';\n\nimport TextField from \"@mui/material/TextField\";\n\n// import { mensagemSucesso, mensagemErro } from '../components/toastr';\n\nimport '../custom.css';\n\n// import { useNavigate } from 'react-router-dom';\n\n// import Stack from '@mui/material/Stack';\n// import { IconButton } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit';\n\nimport axios from 'axios';\nimport { BASE_URL } from '../config/axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = `${BASE_URL}jsonfake/produtos`;\n\n// const relacaoCores = new Map();\n// //relacaoCores.set(\"\", \"\");\n// // não sei se é necessário relacionar \"\" com \"\", visto que o código funciona sem essa relação, apesar de isso soar como um erro.\n// relacaoCores.set(\"Vermelha\", \"red\");\n// relacaoCores.set(\"Preta\", \"black\");\n\nfunction LandingPage() {\n  _s();\n  // const navigate = useNavigate();\n\n  //   const cadastrar = () => {\n  //     navigate(`/cadastro-produtos`);\n  //   };\n\n  //   const editar = (id) => {\n  //     navigate(`/cadastro-produtos/${id}`);\n  //   };\n\n  const [dados, setDados] = React.useState(null);\n\n  //   async function excluir(id) {\n  //     let data = JSON.stringify({ id });\n  //     let url = `${baseURL}/${id}`;\n  //     console.log(url);\n  //     await axios\n  //       .delete(url, data, {\n  //         headers: { 'Content-Type': 'application/json' },\n  //       })\n  //       .then(function (response) {\n  //         mensagemSucesso(`Produto excluído com sucesso!`);\n  //         setDados(\n  //           dados.filter((dado) => {\n  //             return dado.id !== id;\n  //           })\n  //         );\n  //       })\n  //       .catch(function (error) {\n  //         mensagemErro(`Erro ao excluir o produto`);\n  //       });\n  //   }\n\n  React.useEffect(() => {\n    axios.get(baseURL).then(response => {\n      setDados(response.data);\n    });\n  }, []);\n  if (!dados) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cat\\xE1logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        variant: \"outlined\",\n        fullWidth: true,\n        label: \"Pesquisar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n  {/* <div className='row'>\n            <div className='col-lg-12'>\n              <div className='bs-component'>\n                <button\n                  type='button'\n                  className='btn btn-warning'\n                  // onClick={() => cadastrar()}\n                >\n                  Novo Produto\n                </button>\n                <table className='table table-hover'>\n                  <thead>\n                    <tr>\n                      <th scope='col'>Nome</th>\n                      <th scope='col'>Preco</th>\n                      <th scope='col'>Peso</th>\n                      <th scope='col'>Categoria</th>\n                      <th scope='col'>Tarja</th>\n                      <th scope='col'>Ações</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {dados.map((dado) => (\n                      <tr key={dado.id}>\n                        <td>{dado.nome}</td>\n                        <td>{\"R$\"+dado.preco}</td>\n                        <td>{dado.peso + \" g\"}</td>\n                        <td>{dado.categoria.nome}</td>  \n                        <td >{dado.tarja.nome === \"Sem Tarja\" ? \"---\" : dado.tarja.nome}</td>  \n                        {/* style={{color:relacaoCores.get(dado.tarja.cor)}} \n                              para cores referentes a cor da tarja. comentei porque a tarja preta não combinaria com o fundo preto, \n                              e se o fundo fosse branco, não mudaria nada de normal para tarja preta.\n                        \n                        <td>\n                          <Stack spacing={1} padding={0} direction='row'>\n                            <IconButton\n                              aria-label='edit'\n                              style={{ color: \"white\"}}\n                              // onClick={() => editar(dado.id)}\n                            >\n                              <EditIcon /> \n                            </IconButton>\n                            <IconButton\n                              aria-label='delete'\n                              style={{ color: \"red\"}}\n                              // onClick={() => excluir(dado.id)}\n                            >\n                              <DeleteIcon />\n                            </IconButton>\n                          </Stack>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>{' '}\n              </div>\n            </div>\n          </div> \n          */}\n}\n_s(LandingPage, \"NQOQEWwvgApxmvJtbFdUWW1tEhI=\");\n_c = LandingPage;\nexport default LandingPage;\nvar _c;\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"names":["React","TextField","axios","BASE_URL","jsxDEV","_jsxDEV","baseURL","LandingPage","_s","dados","setDados","useState","useEffect","get","then","response","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","variant","fullWidth","label","_c","$RefreshReg$"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/src/views/landing-page.js"],"sourcesContent":["import React from 'react';\n\n// import Card from '../components/card';\n\nimport TextField from \"@mui/material/TextField\";\n\n// import { mensagemSucesso, mensagemErro } from '../components/toastr';\n\nimport '../custom.css';\n\n// import { useNavigate } from 'react-router-dom';\n\n// import Stack from '@mui/material/Stack';\n// import { IconButton } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit';\n\nimport axios from 'axios';\nimport { BASE_URL } from '../config/axios';\n\nconst baseURL = `${BASE_URL}jsonfake/produtos`;\n\n// const relacaoCores = new Map();\n// //relacaoCores.set(\"\", \"\");\n// // não sei se é necessário relacionar \"\" com \"\", visto que o código funciona sem essa relação, apesar de isso soar como um erro.\n// relacaoCores.set(\"Vermelha\", \"red\");\n// relacaoCores.set(\"Preta\", \"black\");\n\nfunction LandingPage() {\n    // const navigate = useNavigate();\n\n    //   const cadastrar = () => {\n    //     navigate(`/cadastro-produtos`);\n    //   };\n\n    //   const editar = (id) => {\n    //     navigate(`/cadastro-produtos/${id}`);\n    //   };\n\n    const [dados, setDados] = React.useState(null);\n\n    //   async function excluir(id) {\n    //     let data = JSON.stringify({ id });\n    //     let url = `${baseURL}/${id}`;\n    //     console.log(url);\n    //     await axios\n    //       .delete(url, data, {\n    //         headers: { 'Content-Type': 'application/json' },\n    //       })\n    //       .then(function (response) {\n    //         mensagemSucesso(`Produto excluído com sucesso!`);\n    //         setDados(\n    //           dados.filter((dado) => {\n    //             return dado.id !== id;\n    //           })\n    //         );\n    //       })\n    //       .catch(function (error) {\n    //         mensagemErro(`Erro ao excluir o produto`);\n    //       });\n    //   }\n\n    React.useEffect(() => {\n        axios.get(baseURL).then((response) => {\n            setDados(response.data);\n        });\n    }, []);\n\n    if (!dados) return null;\n    return (\n        <div className='container'>\n\n\n            <h1>Catálogo</h1>\n            <div className=\"search\">\n                <TextField\n                    id=\"outlined-basic\"\n                    variant=\"outlined\"\n                    fullWidth\n                    label=\"Pesquisar\"\n                />\n            </div>\n\n\n        </div>\n    );\n\n{/* <div className='row'>\n          <div className='col-lg-12'>\n            <div className='bs-component'>\n              <button\n                type='button'\n                className='btn btn-warning'\n                // onClick={() => cadastrar()}\n              >\n                Novo Produto\n              </button>\n              <table className='table table-hover'>\n                <thead>\n                  <tr>\n                    <th scope='col'>Nome</th>\n                    <th scope='col'>Preco</th>\n                    <th scope='col'>Peso</th>\n                    <th scope='col'>Categoria</th>\n                    <th scope='col'>Tarja</th>\n                    <th scope='col'>Ações</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {dados.map((dado) => (\n                    <tr key={dado.id}>\n                      <td>{dado.nome}</td>\n                      <td>{\"R$\"+dado.preco}</td>\n                      <td>{dado.peso + \" g\"}</td>\n                      <td>{dado.categoria.nome}</td>  \n                      <td >{dado.tarja.nome === \"Sem Tarja\" ? \"---\" : dado.tarja.nome}</td>  \n                      {/* style={{color:relacaoCores.get(dado.tarja.cor)}} \n                            para cores referentes a cor da tarja. comentei porque a tarja preta não combinaria com o fundo preto, \n                            e se o fundo fosse branco, não mudaria nada de normal para tarja preta.\n                      \n                      <td>\n                        <Stack spacing={1} padding={0} direction='row'>\n                          <IconButton\n                            aria-label='edit'\n                            style={{ color: \"white\"}}\n                            // onClick={() => editar(dado.id)}\n                          >\n                            <EditIcon /> \n                          </IconButton>\n                          <IconButton\n                            aria-label='delete'\n                            style={{ color: \"red\"}}\n                            // onClick={() => excluir(dado.id)}\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </Stack>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>{' '}\n            </div>\n          </div>\n        </div> \n        */}\n}\n\n\nexport default LandingPage;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AAEA,OAAOC,SAAS,MAAM,yBAAyB;;AAE/C;;AAEA,OAAO,eAAe;;AAEtB;;AAEA;AACA;AACA;AACA;;AAEA,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,OAAO,GAAG,GAAGH,QAAQ,mBAAmB;;AAE9C;AACA;AACA;AACA;AACA;;AAEA,SAASI,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,KAAK,CAACW,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAX,KAAK,CAACY,SAAS,CAAC,MAAM;IAClBV,KAAK,CAACW,GAAG,CAACP,OAAO,CAAC,CAACQ,IAAI,CAAEC,QAAQ,IAAK;MAClCL,QAAQ,CAACK,QAAQ,CAACC,IAAI,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACP,KAAK,EAAE,OAAO,IAAI;EACvB,oBACIJ,OAAA;IAAKY,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAGtBb,OAAA;MAAAa,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBjB,OAAA;MAAKY,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACnBb,OAAA,CAACJ,SAAS;QACNsB,EAAE,EAAC,gBAAgB;QACnBC,OAAO,EAAC,UAAU;QAClBC,SAAS;QACTC,KAAK,EAAC;MAAW;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGL,CAAC;EAGd,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YA1DC;AA2DD;AAACd,EAAA,CAtHQD,WAAW;AAAAoB,EAAA,GAAXpB,WAAW;AAyHpB,eAAeA,WAAW;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}