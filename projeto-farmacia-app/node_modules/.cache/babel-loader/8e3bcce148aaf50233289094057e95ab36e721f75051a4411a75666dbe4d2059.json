{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar Danger = require(\"./Danger\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\nvar invariant = require(\"./invariant\");\n\n/**\n * The DOM property to use when setting text content.\n *\n * @type {string}\n * @private\n */\nvar textContentAccessor = getTextContentAccessor();\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n  parentNode.insertBefore(childNode, parentNode.childNodes[index] || null);\n}\nvar updateTextContent;\nif (textContentAccessor === 'textContent') {\n  /**\n   * Sets the text content of `node` to `text`.\n   *\n   * @param {DOMElement} node Node to change\n   * @param {string} text New text content\n   */\n  updateTextContent = function (node, text) {\n    node.textContent = text;\n  };\n} else {\n  /**\n   * Sets the text content of `node` to `text`.\n   *\n   * @param {DOMElement} node Node to change\n   * @param {string} text New text content\n   */\n  updateTextContent = function (node, text) {\n    // In order to preserve newlines correctly, we can't use .innerText to set\n    // the contents (see #1080), so we empty the element then append a text node\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n    if (text) {\n      var doc = node.ownerDocument || document;\n      node.appendChild(doc.createTextNode(text));\n    }\n  };\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n  updateTextContent: updateTextContent,\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function (updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n    for (var i = 0; update = updates[i]; i++) {\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n        \"production\" !== process.env.NODE_ENV ? invariant(updatedChild, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(updatedChild);\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n    for (var k = 0; update = updates[k]; k++) {\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          updateTextContent(update.parentNode, update.textContent);\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n};\nmodule.exports = DOMChildrenOperations;","map":{"version":3,"names":["Danger","require","ReactMultiChildUpdateTypes","getTextContentAccessor","invariant","textContentAccessor","insertChildAt","parentNode","childNode","index","insertBefore","childNodes","updateTextContent","node","text","textContent","firstChild","removeChild","doc","ownerDocument","document","appendChild","createTextNode","DOMChildrenOperations","dangerouslyReplaceNodeWithMarkup","processUpdates","updates","markupList","update","initialChildren","updatedChildren","i","type","MOVE_EXISTING","REMOVE_NODE","updatedIndex","fromIndex","updatedChild","parentID","process","env","NODE_ENV","push","renderedMarkup","dangerouslyRenderMarkup","j","length","k","INSERT_MARKUP","markupIndex","toIndex","TEXT_CONTENT","module","exports"],"sources":["/home/guilherme/Faculdade/LP2/Projeto_Farmacia/projeto-farmacia-app/node_modules/react-checkbox/node_modules/react/lib/DOMChildrenOperations.js"],"sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar Danger = require(\"./Danger\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\nvar invariant = require(\"./invariant\");\n\n/**\n * The DOM property to use when setting text content.\n *\n * @type {string}\n * @private\n */\nvar textContentAccessor = getTextContentAccessor();\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n  parentNode.insertBefore(\n    childNode,\n    parentNode.childNodes[index] || null\n  );\n}\n\nvar updateTextContent;\nif (textContentAccessor === 'textContent') {\n  /**\n   * Sets the text content of `node` to `text`.\n   *\n   * @param {DOMElement} node Node to change\n   * @param {string} text New text content\n   */\n  updateTextContent = function(node, text) {\n    node.textContent = text;\n  };\n} else {\n  /**\n   * Sets the text content of `node` to `text`.\n   *\n   * @param {DOMElement} node Node to change\n   * @param {string} text New text content\n   */\n  updateTextContent = function(node, text) {\n    // In order to preserve newlines correctly, we can't use .innerText to set\n    // the contents (see #1080), so we empty the element then append a text node\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n    if (text) {\n      var doc = node.ownerDocument || document;\n      node.appendChild(doc.createTextNode(text));\n    }\n  };\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n\n  updateTextContent: updateTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function(updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n\n    for (var i = 0; update = updates[i]; i++) {\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||\n          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          updatedChild,\n          'processUpdates(): Unable to find child %s of element. This ' +\n          'probably means the DOM was unexpectedly mutated (e.g., by the ' +\n          'browser), usually due to forgetting a <tbody> when using tables, ' +\n          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+\n          'in an <svg> parent. Try inspecting the child nodes of the element ' +\n          'with React ID `%s`.',\n          updatedIndex,\n          parentID\n        ) : invariant(updatedChild));\n\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; update = updates[k]; k++) {\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(\n            update.parentNode,\n            renderedMarkup[update.markupIndex],\n            update.toIndex\n          );\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(\n            update.parentNode,\n            initialChildren[update.parentID][update.fromIndex],\n            update.toIndex\n          );\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          updateTextContent(\n            update.parentNode,\n            update.textContent\n          );\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n\n};\n\nmodule.exports = DOMChildrenOperations;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}